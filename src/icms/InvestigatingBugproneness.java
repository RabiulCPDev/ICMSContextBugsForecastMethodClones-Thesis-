/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package icms;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import javax.swing.JOptionPane;

class BugFixCommit {

    int commit = 0;
    String changedclones = "";
    String changedmethodclones = "";
}

/**
 *
 * @author Manishankar
 */
public class InvestigatingBugproneness extends javax.swing.JFrame {

    /**
     * Creates new form InvestigatingBugproneness
     */
    public InvestigatingBugproneness() {
        initComponents();
    }

    CommonParameters cp = new CommonParameters();
    DatabaseAccess da = new DatabaseAccess();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Investigation on Bugproneness of Code Clones");

        jButton1.setText("Investigation 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Percentage of changes to clones related to bug-fix");

        jButton2.setText("Investigation 2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Percentage of bug-fix changes occurred to method clones and block clones");

        jButton3.setText("Investigation 3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Percentage of bug-fix changes in cloned and non-cloned code");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Clone Type");

        jTextField1.setText("jTextField1");

        jButton4.setText("Investigation 4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("Percentage of bug-fix changes related to late propagation");

        jButton5.setText("Investigation 5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel7.setText("Proportion of clones related to bug-fix");

        jButton6.setText("Investigation 6");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel8.setText("Bug fix commits and clones modified in those commits");

        jButton7.setText("Investigation 7");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel9.setText("Are the clone fragments co-changed consistently during bug-fix");

        jButton8.setText("Investigation 8");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel10.setText("Are the bug-fix clone fragments SPCP clone fragments");

        jButton9.setText("Investigation 9");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel11.setText("Find dispersion of clone bugs");

        jButton10.setText("Investigation 10");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel12.setText("Visualization of bug groups");

        jButton11.setText("Investigation 11");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel13.setText("Replication of bugs in SPCP and non-SPCP clones");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1))
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13))))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jLabel10))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jLabel13))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int getclonetype() {
        return Integer.parseInt(jTextField1.getText().trim());
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        investigation1(getclonetype());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        investigation2(getclonetype());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        investigation4(getclonetype());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

        investigation5(getclonetype());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        investigation3(getclonetype());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        investigation6(getclonetype());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:

        investigation7(getclonetype());


    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:

        investigation8(getclonetype());
    }//GEN-LAST:event_jButton8ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

        setLocation(600, 300);
    }//GEN-LAST:event_formWindowOpened

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:

        investigation9(getclonetype());

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:

        try {
            investigation10(getclonetype());
        } catch (Exception e) {
            System.out.println("error. " + e);
        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        investigation11(getclonetype());
    }//GEN-LAST:event_jButton11ActionPerformed

    public void investigation11(int clonetype) {
        class bugfixcommit {

            int commit = 0;
            String changedclones = "";
            String changedgcids = "";
            String changedmethodclones = "";
        }

        SingleSPCPClonePair[] spcppairs = da.getSPCPClones(clonetype);
        String spcpclones = "";
        for (int i = 0; spcppairs[i] != null; i++) {
            if (!spcpclones.contains(" " + spcppairs[i].globalcloneid1 + " ")) {
                spcpclones += " " + spcppairs[i].globalcloneid1 + " ";
            }
            if (!spcpclones.contains(" " + spcppairs[i].globalcloneid2 + " ")) {
                spcpclones += " " + spcppairs[i].globalcloneid2 + " ";
            }
        }

        bugfixcommit[] commits = new bugfixcommit[10000];
        int count = 0;

        bugfixgroup[] groups = new bugfixgroup[10000];
        int gcount = 0;

        String bugfixcommits = " " + getBugFixCommits() + " ";

        for (int i = 1; i < cp.revisionCount; i++) {
            System.out.println("revision = " + i);
            if (bugfixcommits.contains(" " + (i + 1) + " ")) {
                commits[count] = new bugfixcommit();
                commits[count].commit = i;

                SingleClone[] clones = da.getClones(i, clonetype);
                for (int j = 0; clones[j] != null; j++) {
                    if (Integer.parseInt(clones[j].changecount) > 0) {
                        commits[count].changedclones += " " + clones[j].cloneid + " ";
                        commits[count].changedgcids += " " + clones[j].globalcloneid + " ";
                    }
                }

                int l = commits[count].changedclones.trim().split("[ ]+").length;
                if (commits[count].changedclones.trim().length() == 0) {
                    l = 0;
                }

                for (int j = 0; j < l; j++) {
                    int aclone = Integer.parseInt(commits[count].changedclones.trim().split("[ ]+")[j].trim());
                    int aclonegcid = Integer.parseInt(commits[count].changedgcids.trim().split("[ ]+")[j].trim());

                    //check whether this clone is already included in a group.
                    int gc = 0;
                    for (gc = 0; gc < gcount; gc++) {
                        if (groups[gc].commit == i && groups[gc].clonegroup.contains(" " + aclone + " ")) {
                            groups[gc].affectedclones += " " + aclone + " ";
                            groups[gc].affectedglobalcloneids += " " + aclonegcid + " ";
                            if (spcpclones.contains(" " + aclonegcid + " ")) {
                                groups[gc].affectedSPCPclones += " " + aclonegcid + " ";
                            }
                            break;
                        }
                    }
                    if (gc == gcount) //the clone was not included in any group.
                    {
                        groups[gcount] = new bugfixgroup();
                        groups[gcount].commit = i;
                        groups[gcount].clonegroup = getCloneGroup(i, clonetype, aclone);
                        groups[gcount].affectedclones = " " + aclone + " ";
                        groups[gcount].affectedglobalcloneids = " " + aclonegcid + " ";
                        if (spcpclones.contains(" " + aclonegcid + " ")) {
                            groups[gcount].affectedSPCPclones += " " + aclonegcid + " ";
                        }
                        gcount++;
                    }
                }
                count++;
            }
        }

        //traversing through the groups.
        int sumgroups = 0;
        int sumaffecteds = 0;
        for (int i = 0; i < gcount; i++) {
            System.out.println("\n\ngroup count = " + (i + 1));
            System.out.println("\tcommit = " + groups[i].commit);
            System.out.println("\tgroup = " + groups[i].clonegroup);
            System.out.println("\taffected clones = " + groups[i].affectedclones);
            System.out.println("\taffected clones (gcids) = " + groups[i].affectedglobalcloneids);
            System.out.println("\taffected SPCP clones (gcids) = " + groups[i].affectedSPCPclones);
            System.out.println("\tclone fragment count in group = " + groups[i].clonegroup.trim().split("[ ]+").length + ", no. of affected clones = " + groups[i].affectedclones.trim().split("[ ]+").length);
            sumgroups += groups[i].clonegroup.trim().split("[ ]+").length;
            sumaffecteds += groups[i].affectedclones.trim().split("[ ]+").length;
        }

        System.out.println("affected group count = " + gcount);
        System.out.println("dispersion of bugs = " + ((float) sumaffecteds / sumgroups));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugproneness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugproneness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugproneness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugproneness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvestigatingBugproneness().setVisible(true);
            }
        });
    }

    int[] commits = new int[10000];
    String[] committers = new String[10000];
    int commitcount = 0;

    public String getBugFixCommits() {
        String bugFixCommits = "";
        commitcount = 0;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(cp.subject_system + "/commitlog.txt")));
            String str = "";
            String prevString = "";

            int commit = 0;
            while ((str = br.readLine()) != null) {
                if (str.trim().length() == 0) {
                    continue;
                }

                if (prevString.contains("--------------------------------")) {
                    //this is the starting of a commit report.
                    //we need to know the commit number.
                    String str1 = str.trim().split("[ ]+")[0].trim();
                    str1 = str1.substring(1);
                    String str2 = str.trim().split("[ ]+")[2].trim();

                    try {
                        commit = Integer.parseInt(str1);
                        commits[commitcount] = commit;
                        committers[commitcount] = str2;
                        commitcount++;
                    } catch (Exception e) {
                        commit = -99;
                    }
                    //System.out.println (commit);
                } else {
                    //according to the study of Mockus
                    if (str.toLowerCase().contains("bug") || str.toLowerCase().contains("fix") || str.toLowerCase().contains("fixup") || str.toLowerCase().contains("error") || str.toLowerCase().contains("fail")) //if (str.contains ("bug") || str.contains("fix") || str.contains ("fixup") || str.contains ("error") || str.contains ("fail"))
                    {
                        if (!bugFixCommits.contains(" " + commit + " ")) {
                            bugFixCommits += " " + commit + " ";
                        }
                    }
                    //System.out.println ("This is " + bugFixCommits);
                }
                prevString = str;

            }
            br.close();
            // Show bugfix revision
            // System.out.println ("revisions that were created because of a bug fix = "+bugFixCommits);
        } catch (Exception e) {
            System.out.println("error. getBugFixCommits. " + e);
        }
        return bugFixCommits;
    }

    public String getCommitter(int commitnum) {
        for (int i = 0; i < commitcount; i++) {
            if (commits[i] == commitnum) {
                return committers[i];
            }
        }
        return "";
    }

    public void analyzeBugpronenessOfClones(int clonetype) {
        //investigation 1.
        //how many of the bug-fixing changes are related to late propagations.
        investigation4(clonetype);

        String bugfixcommits = " " + getBugFixCommits() + " ";

        int totalclones = 0;
        int bugfixclones = 0;
        int bugfixcommitscount = 0;

        int totalchanges = 0;
        int bugfixchanges = 0;

        int totalchangestoclones = 0;
        int bugfixchangestoclones = 0;

        int totalchangestononclones = 0;
        int bugfixchangestononclones = 0;

        int bugfixchangestomethodclones = 0;
        int bugfixchangestoblockclones = 0;

        //String bugfixcloneids = "";
        int bugfixmethodclones = 0;
        int bugfixblockclones = 0;

        //considering each revision we determine the number of clones that received bug-fix commits.
        for (int r = 1; r <= cp.revisionCount - 1; r++) {
            System.out.println("working on revision " + r);
            //bugfixcloneids = "";

            //total changes.
            SingleChange[] changes = da.getChanges((r - 1));
            for (int i = 0; changes[i] != null; i++) {
                totalchanges++;
                if (bugfixcommits.contains(" " + r + " ")) {
                    bugfixchanges++;
                }
            }

            //changes to clones.
            SingleClone[] clones = da.getClones((r - 1), clonetype);
            for (int i = 0; clones[i] != null; i++) {
                if (clones[i].changecount == null) {
                    continue;
                }
                if (Integer.parseInt(clones[i].changecount) == 0) {
                    continue;
                }

                totalchangestoclones += Integer.parseInt(clones[i].changecount);

                if (bugfixcommits.contains(" " + r + " ")) {
                    bugfixchangestoclones += Integer.parseInt(clones[i].changecount);
                    //bugfixcloneids += " " + clones[i].cloneid + " ";  

                    //checking whether this clone is a block clone or a method clone..
                    int clonelength = Integer.parseInt(clones[i].endline) - Integer.parseInt(clones[i].startline);

                    if (clones[i].methodid != null && clones[i].methodid.length() > 0 && !clones[i].methodid.equals("null")) {
                        int methodid = Integer.parseInt(clones[i].methodid);

                        if (methodid > -1) {
                            String[] temp2 = da.getData("methods", "startline, endline", " where revision = '" + (r - 1) + "' and methodid = '" + methodid + "'");
                            int methodlength = Integer.parseInt(temp2[0].split("[,]+")[1].trim()) - Integer.parseInt(temp2[0].split("[,]+")[0].trim());

                            if (methodlength - clonelength < 2) {
                                bugfixchangestomethodclones += Integer.parseInt(clones[i].changecount);
                            } else {
                                bugfixchangestoblockclones += Integer.parseInt(clones[i].changecount);
                            }
                        } else {
                            bugfixchangestoblockclones += Integer.parseInt(clones[i].changecount);
                        }
                    } else {
                        bugfixchangestoblockclones += Integer.parseInt(clones[i].changecount);
                    }
                }
            }

            /*if (bugfixcloneids.trim().length () > 0)
            {
                String [] clones = da.getData("type"+clonetype+"clones", "cloneid, startline, endline", " where revision = "+(r-1));
                String [] resultclones = new String [1000];                
                int rccount = 0;
                for (int i =0; clones[i] != null;i++)
                {
                    String cid = clones[i].split("[,]+")[0].trim();
                    if (bugfixcloneids.contains (" "+cid+" "))
                    {
                        resultclones[rccount] = clones[i];
                        rccount++;
                    }
                }
                
                String [] clonesinmethods = da.getData ("type"+clonetype+"clonesinmethods", "cloneid, methodid", " where revision = "+(r-1));
                String [] resultclonesinmethods = new String [100];
                int rcim = 0;
                for (int i =0;clonesinmethods[i] != null;i++)
                {
                    for (int j =0;j<rccount;j++)
                    {
                        if (resultclones[j].split("[,]+")[0].trim().equals (clonesinmethods[i].split("[,]+")[0].trim()))
                        {
                            resultclonesinmethods[rcim] = resultclones[j] + ", "+ clonesinmethods[i].split("[,]+")[1].trim();
                            rcim++;
                            break;
                        }
                    }
                }
                
                String [] methods = da.getData("methods", "methodid, startline, endline", " where revision = "+(r-1));
                for (int i =0;i<rcim;i++)
                {
                    for (int j=0;methods[j] != null;j++)
                    {
                        if (resultclonesinmethods[i].split("[,]+")[3].trim().equals (methods[j].split("[,]+")[0].trim()))
                        {
                            int clonelength = Integer.parseInt (resultclonesinmethods[i].split("[,]+")[2].trim()) - Integer.parseInt (resultclonesinmethods[i].split("[,]+")[1].trim());
                            int methodlength = Integer.parseInt (methods[j].split("[,]+")[2].trim()) - Integer.parseInt (methods[j].split("[,]+")[1].trim());
                            if (methodlength - clonelength < 2)
                            {
                                bugfixmethodclones++;
                            }
                            else
                            {
                                bugfixblockclones++;
                            }
                            break;
                        }
                    }
                }
            }*/
            //important. do not delete.
            //by discarding the changes to clones from the total changes we get the changes to nonclones.
            //changes to method clones or block clones.
            /*if (bugfixcommits.contains (" "+r+" "))
            {
                //r was created because of a bug-fix commit. So, we need to check r-1 for the changes.
                int pr = r-1;
                
                //determining the count of clones changed at bug-fix.
                String [] clones = da.getData("type"+clonetype+"clonechanges", "cloneid, changecount", " where revision = "+pr);
                for (int i =0;clones[i] != null;i++)
                {
                    bugfixclones++;
                }
                if (clones[0] != null)
                {
                    bugfixcommitscount++;
                }
                
                //determining the count of all clones.
                String [] allclones = da.getData("type"+clonetype+"clones", "cloneid", " where revision = "+pr);
                for (int i =0;allclones[i] != null;i++)
                {
                    totalclones++;
                }                
            }*/
        }
        //System.out.println ("total clones = "+totalclones);
        //System.out.println ("bug-fix clones = "+bugfixclones);
        //System.out.println ("% of bug-fix clones = "+(bugfixclones*100)/(float)totalclones);
        //System.out.println ("bug-fix-commits count = "+bugfixcommitscount);

        System.out.println("\n\nHow many changes occurred to the clone fragments and what proportion of these changes were related to bug-fix?");
        System.out.println("total changes to clones = " + totalchangestoclones);
        System.out.println("bug-fix changes to clones = " + bugfixchangestoclones);
        System.out.println("percentage of changes to clones related to bug-fix = " + (float) bugfixchangestoclones * 100 / totalchangestoclones);

        System.out.println("\n\nHow many changes occurred to the nonclone fragments and what proportion of these changes were related to bug-fix");
        System.out.println("total changes to nonclones = " + (totalchanges - totalchangestoclones));
        System.out.println("bug-fix changes to nonclones = " + (bugfixchanges - bugfixchangestoclones));
        System.out.println("percentage of changes to nonclones related to bug-fix = " + (float) (bugfixchanges - bugfixchangestoclones) * 100 / (totalchanges - totalchangestoclones));

        System.out.println("\n\nnumber of method clones involved in bug-fix = " + bugfixmethodclones);
        System.out.println("Number of block clones involved in bug-fix = " + bugfixblockclones);

        System.out.println("\n\nBug fix changes to method clones = " + bugfixchangestomethodclones);
        System.out.println("Bug fix changes to block clones = " + bugfixchangestoblockclones);
    }

    //percentage of changes to clones related to bug-fix.
    public void investigation1(int clonetype) {
        String bugfixcommits = getBugFixCommits();
        int totalchanges = 0;
        int bugfixchanges = 0;

        for (int r = 1; r <= cp.revisionCount - 1; r++) {
            System.out.println("working on revision " + r);

            SingleClone[] clones = da.getClones(r - 1, clonetype);
            for (int i = 0; clones[i] != null; i++) {
                totalchanges = totalchanges + Integer.parseInt(clones[i].changecount);

                if (bugfixcommits.contains(" " + r + " ")) {
                    bugfixchanges = bugfixchanges + Integer.parseInt(clones[i].changecount);
                }
            }
        }

        System.out.println("total changes to clones = " + totalchanges);
        System.out.println("bug-fix changes to clones = " + bugfixchanges);
        System.out.println("percentage of changes related to bug-fix = " + (float) bugfixchanges * 100 / totalchanges);
    }

    //percentage of bu-fix changes occurred to block clones or method clones.
    public void investigation2(int clonetype) {
        String bugfixcommits = getBugFixCommits();

        int total = 0;
        int totalblock = 0;
        int totalmethod = 0;

        int totalbugfixblock = 0;
        int totalbugfixmethod = 0;

        int methodclonecount = 0;
        int blockclonecount = 0;

        //String bugfixmethodclones = "";
        //String bugfixblockclones = "";
        for (int r = 1; r <= cp.revisionCount - 1; r++) {
            System.out.println("working on revision " + r);

            SingleClone[] clones = da.getClones(r - 1, clonetype);
            SingleMethod[] methods = da.getMethods(r - 1);

            for (int i = 0; clones[i] != null; i++) {
                int j = 0;
                for (j = 0; methods[j] != null; j++) {
                    if (methods[j].methodid.equals(clones[i].methodid)) {
                        int clonelength = Integer.parseInt(clones[i].endline) - Integer.parseInt(clones[i].startline);
                        int methodlength = Integer.parseInt(methods[j].endline) - Integer.parseInt(methods[j].startline);

                        if (methodlength - clonelength < 2) {
                            methodclonecount++;
                            totalmethod = totalmethod + Integer.parseInt(clones[i].changecount);
                            if (bugfixcommits.contains(" " + r + " ")) {
                                totalbugfixmethod = totalbugfixmethod + Integer.parseInt(clones[i].changecount);
                            }
                            //bugfixmethodclones += " " + clones[i].globalcloneid + " ";
                        } else {
                            blockclonecount++;
                            totalblock = totalblock + Integer.parseInt(clones[i].changecount);
                            if (bugfixcommits.contains(" " + r + " ")) {
                                totalbugfixblock = totalbugfixblock + Integer.parseInt(clones[i].changecount);
                            }
                        }
                        break;
                    }
                }
                if (methods[j] == null) {
                    blockclonecount++;
                    totalblock = totalblock + Integer.parseInt(clones[i].changecount);
                    if (bugfixcommits.contains(" " + r + " ")) {
                        totalbugfixblock = totalbugfixblock + Integer.parseInt(clones[i].changecount);
                    }
                }
            }
            //bugfixmethodclones += " revision = "+r + "\n";
        }

        //System.out.println ("\n\nbug-fix method clones.");
        //System.out.println (bugfixmethodclones);
        System.out.println("\n\ntotal clones = " + (methodclonecount + blockclonecount));
        System.out.println("block clone count = " + blockclonecount);
        System.out.println("method clone count = " + methodclonecount);
        System.out.println("% of block clones = " + (float) blockclonecount * 100 / (methodclonecount + blockclonecount));
        System.out.println("% of method clones = " + (float) methodclonecount * 100 / (methodclonecount + blockclonecount));
        System.out.println("no. of changes per block clone = " + (float) totalblock * cp.revisionCount / (blockclonecount));
        System.out.println("no. of changes per method clone = " + (float) totalmethod * cp.revisionCount / (methodclonecount));

        System.out.println("\n\ntotal changes = " + (totalblock + totalmethod));
        System.out.println("total changes in block clones = " + totalblock);
        System.out.println("no. of bug-fix changes in block clones = " + totalbugfixblock);
        System.out.println("total changes in method clones = " + totalmethod);
        System.out.println("no. of bug-fix changes in method clones = " + totalbugfixmethod);

        System.out.println("% of bug-fix changes in block clones = " + (float) totalbugfixblock * 100 / (totalblock));
        System.out.println("% of bug-fix changes in method clones = " + (float) totalbugfixmethod * 100 / (totalmethod));
    }

    public int isMethodClone(int gcid, int clonetype, int revision) {
        try {
            int globalcloneid = gcid;
            DatabaseAccess dbase = new DatabaseAccess();

            //getting method id.
            dbase.connect();
            dbase.executeQuery("select startline, endline, methodid from type" + clonetype + "clones where globalcloneid = " + globalcloneid + " and revision = " + revision);
            dbase.result.next();
            int methodid = Integer.parseInt(dbase.result.getString("methodid"));
            int clonestartline = Integer.parseInt(dbase.result.getString("startline"));
            int cloneendline = Integer.parseInt(dbase.result.getString("endline"));
            dbase.disconnect();

            //getting method information.
            dbase.connect();
            dbase.executeQuery("select startline, endline from methods where revision = " + revision + " and methodid = " + methodid);
            dbase.result.next();
            int methodstartline = Integer.parseInt(dbase.result.getString("startline"));
            int methodendline = Integer.parseInt(dbase.result.getString("endline"));
            dbase.disconnect();

            int methodlength = methodendline - methodstartline;
            int clonelength = cloneendline - clonestartline;

            if (methodlength - clonelength < 2) {
                return 1;
            }
        } catch (Exception e) {
            System.out.println("error: " + e);
        }

        return 0;
    }

    //percentage of bug-fix changes in cloned and noncloned code.
    public void investigation3(int clonetype) {
        String bugfixcommits = " " + getBugFixCommits() + " ";
        int clonechanges = 0;
        int nonclonechanges = 0;
        int clonebugfixchanges = 0;
        int nonclonebugfixchanges = 0;

        for (int r = 1; r < cp.revisionCount; r++) {
            System.out.println("revision = " + r);
            SingleChange[] changes = da.getChanges(r);
            SingleClone[] clones = da.getClones(r, clonetype);

            int totalchanges = 0;
            for (int i = 0; changes[i] != null; i++) {
                totalchanges++;
            }
            int totalclonechanges = 0;
            for (int i = 0; clones[i] != null; i++) {
                totalclonechanges += Integer.parseInt(clones[i].changecount);
            }
            int totalnonclonechanges = totalchanges - totalclonechanges;

            clonechanges += totalclonechanges;
            nonclonechanges += totalnonclonechanges;

            if (bugfixcommits.contains(" " + (r + 1) + " ")) {
                clonebugfixchanges += totalclonechanges;
                nonclonebugfixchanges += totalnonclonechanges;
            }
        }

        System.out.println("\n\ntotal changes to nonclones = " + nonclonechanges);
        System.out.println("total bug-fix changes to nonclones = " + nonclonebugfixchanges);
        System.out.println("% of bug-fix changes to nonclones = " + (float) nonclonebugfixchanges * 100 / nonclonechanges);

        System.out.println("\n\ntotal changes to clones = " + clonechanges);
        System.out.println("total bug-fix changes to clones = " + clonebugfixchanges);
        System.out.println("% of bug-fix changes to clones = " + (float) clonebugfixchanges * 100 / clonechanges);

    }

    /*public int checkLatePropagation (int gcid1, int gcid2, int convergedin, int clonetype)
    {
        int lp = 0;
        
        String temp1 = da.getData("select startline, endline from type"+clonetype+"clones where revision = '"+(convergedin-1)+"' and globalcloneid = '"+gcid1+"'", "startline, endline")[0];
        int sline1 = Integer.parseInt(temp1.split("[,]+")[0].trim());
        int eline1 = Integer.parseInt(temp1.split("[,]+")[1].trim());
        
        String temp2 = da.getData("select startline, endline from type"+clonetype+"clones where revision = '"+(convergedin-1)+"' and globalcloneid = '"+gcid2+"'", "startline, endline")[0];
        int sline2 = Integer.parseInt(temp1.split("[,]+")[0].trim());
        int eline2 = Integer.parseInt(temp1.split("[,]+")[1].trim());
        
        //get changes to the revision = convergedin - 1
        
        
        
        return lp;
    }*/
    public void investigation4(int clonetype) {
        String bugfixcommits = " " + getBugFixCommits() + " ";
        SingleLatePropagation[] lps = da.getLatePropagations(clonetype);

        String lpclones = "";
        String bugfixclones = "";
        String lpbugfixclones = "";

        //find all clones that participated in late propagation.
        for (int i = 0; lps[i] != null; i++) {
            System.out.println("checking lp " + (i + 1));
            String c1 = lps[i].globalcloneid1;
            String c2 = lps[i].globalcloneid2;
            int convin = Integer.parseInt(lps[i].convergedin);

            //did they really received late propagation.
            int temp1 = 0, temp2 = 0;
            String str = da.getData("select sum(changecount) cnt  from type" + clonetype + "clones where revision = '" + (convin - 1) + "' and globalcloneid = '" + c1 + "' ", "cnt")[0].trim();
            if (str != null && !str.equals("null")) {
                temp1 = Integer.parseInt(str);
            }
            str = da.getData("select sum(changecount) cnt from type" + clonetype + "clones where revision = '" + (convin - 1) + "' and globalcloneid = '" + c2 + "' ", "cnt")[0].trim();
            if (str != null && !str.equals("null")) {
                temp2 = Integer.parseInt(str);
            }

            int cnt = temp1 + temp2;
            if (cnt == 0) //this is not a late propagation.
            {
                System.out.println("\t\tnot a late propagation.");
                continue;
            }

            if (!lpclones.contains(" " + c1 + " ")) {
                lpclones += " " + c1 + " ";
            }
            if (!lpclones.contains(" " + c2 + " ")) {
                lpclones += " " + c2 + " ";
            }
        }

        //find all clones that participated in bug-fix.
        for (int r = 1; r <= cp.revisionCount; r++) {
            System.out.println("working on revision " + r);
            if (bugfixcommits.contains(" " + r + " ")) {
                String[] bfclones = da.getData("select globalcloneid from type" + clonetype + "clones where revision = '" + (r - 1) + "' and changecount > 0", "globalcloneid");
                for (int i = 0; bfclones[i] != null; i++) {
                    if (!bugfixclones.contains(" " + bfclones[i] + " ")) {
                        bugfixclones += " " + bfclones[i] + " ";
                    }
                }
            }
        }

        //find the common clones in late propagation and bug-fix.
        int commonclones = 0;
        int l = 0;
        if (lpclones.trim().length() > 0) {
            l = lpclones.trim().split("[ ]+").length;
        }
        for (int i = 0; i < l; i++) {
            String lpclone = lpclones.trim().split("[ ]+")[i].trim();
            if (bugfixclones.contains(" " + lpclone + " ")) {
                commonclones++;
            }
        }

        int bugfixclonecount = 0;
        if (bugfixclones.trim().length() > 0) {
            bugfixclonecount = bugfixclones.trim().split("[ ]+").length;
        }

        int lpclonecount = 0;
        if (lpclones.trim().length() > 0) {
            lpclonecount = lpclones.trim().split("[ ]+").length;
        }

        System.out.println("\n\nNo. of bug-fix clones = " + bugfixclonecount);
        System.out.println("No. of late propagation clones = " + lpclonecount);
        System.out.println("No. of common clones = " + commonclones);
        System.out.println("% of bug-fix clones that are related to late propagation = " + ((float) commonclones * 100 / bugfixclonecount));
    }

    //how many of the bug-fixing changes are related to late propagations.
    public void investigation4old(int clonetype) {
        String bugfixcommits = " " + getBugFixCommits() + " ";
        SingleLatePropagation[] lps = da.getLatePropagations(clonetype);

        String lpclones = "";
        String bugfixclones = "";
        String lpbugfixclones = "";

        /*for (int i =0;lps[i] != null;i++)
        {
            System.out.println ("late propagation = "+(i+1));
            
            int conv = Integer.parseInt(lps[i].convergedin);
            
            //if (bugfixcommits.contains (conv))
            int changecount = Integer.parseInt(da.getData("select sum(changecount) cnt from type"+clonetype+"clones where revision = '"+(conv-1)+"' and globalcloneid in ("+lps[i].globalcloneid1+", "+lps[i].globalcloneid2+")", "cnt")[0]);
            bugfixchangesinlatepropagation = bugfixchangesinlatepropagation + changecount;            
        }*/
        int totallpchangecount = 0;
        int totallpbugfixchangecount = 0;
        int totalbugfixchangecount = 0;

        //number of bug-fix changes in clones.
        for (int r = 1; r < cp.revisionCount; r++) {
            System.out.println("revision = " + r);

            //find all the late propagation clones that converged in this revision.
            String clones = "";
            for (int i = 0; lps[i] != null; i++) {
                if (lps[i].convergedin.equals(r + "")) {
                    int gcid1 = Integer.parseInt(lps[i].globalcloneid1);
                    int gcid2 = Integer.parseInt(lps[i].globalcloneid2);

                    String temp1 = da.getData("select changecount from type" + clonetype + "clones where revision = '" + (r - 1) + "' and globalcloneid = '" + gcid1 + "'", "changecount")[0];
                    int changed1 = 0;
                    if (temp1 != null && !temp1.equals("null")) {
                        changed1 = Integer.parseInt(temp1);
                    }
                    if (changed1 > 0) {
                        if (!clones.contains(" " + gcid1 + " ")) {
                            clones += ", " + gcid1 + " ";
                        }
                        if (!lpclones.contains(" " + gcid1 + " ")) {
                            lpclones += " " + gcid1 + " ";
                        }
                        if (bugfixcommits.contains(" " + r + " ")) {
                            if (!lpbugfixclones.contains(" " + gcid1 + " ")) {
                                lpbugfixclones += " " + gcid1 + " ";
                            }
                        }
                    }

                    int changed2 = 0;
                    String temp2 = da.getData("select changecount from type" + clonetype + "clones where revision = '" + (r - 1) + "' and globalcloneid = '" + gcid2 + "'", "changecount")[0];
                    if (temp2 != null && !temp2.equals("null")) {
                        changed2 = Integer.parseInt(temp2);
                    }

                    if (changed2 > 0) {
                        if (!clones.contains(" " + gcid2 + " ")) {
                            clones += ", " + gcid2 + " ";
                        }
                        if (!lpclones.contains(" " + gcid2 + " ")) {
                            lpclones += " " + gcid2 + " ";
                        }
                        if (bugfixcommits.contains(" " + r + " ")) {
                            if (!lpbugfixclones.contains(" " + gcid2 + " ")) {
                                lpbugfixclones += " " + gcid2 + " ";
                            }
                        }
                    }
                }
            }
            if (clones.trim().length() > 0) {
                clones = clones.substring(1);
            }

            //find all changes to late propagation.
            int lpchangecount = 0;
            if (clones.trim().length() > 0) {
                String temp = da.getData("select sum(changecount) cnt from type" + clonetype + "clones where revision = '" + (r - 1) + "' and globalcloneid in (" + clones + ")", "cnt")[0];
                if (temp != null && !temp.equals("null")) {
                    lpchangecount = Integer.parseInt(temp);
                }
            } else {
                lpchangecount = 0;
            }
            totallpchangecount += lpchangecount;
            if (bugfixcommits.contains(" " + r + " ")) {
                totallpbugfixchangecount += lpchangecount;
            }

            if (bugfixcommits.contains(" " + r + " ")) {
                int count = 0;
                String temp = da.getData("select sum(changecount) cnt from type" + clonetype + "clones where revision = '" + (r - 1) + "'", "cnt")[0];
                if (temp != null && !temp.equals("null")) {
                    count = Integer.parseInt(temp);
                }
                totalbugfixchangecount = totalbugfixchangecount + count;

                String[] bfclones = da.getData("select globalcloneid from type" + clonetype + "clones where revision = '" + (r - 1) + "' and changecount > 0", "globalcloneid");
                for (int i = 0; bfclones[i] != null; i++) {
                    if (!bugfixclones.contains(" " + bfclones[i] + " ")) {
                        bugfixclones += " " + bfclones[i] + " ";
                    }
                }
            }
        }
        int bugfixclonescount = 0;
        int lpclonescount = 0;
        int lpbugfixclonescount = 0;
        if (lpclones.trim().length() > 0) {
            lpclonescount = lpclones.trim().split("[ ]+").length;
        }
        if (bugfixclones.trim().length() > 0) {
            bugfixclonescount = bugfixclones.trim().split("[ ]+").length;
        }
        if (lpbugfixclones.trim().length() > 0) {
            lpbugfixclonescount = lpbugfixclones.trim().split("[ ]+").length;
        }

        System.out.println("\n\nnumber of clones related to bugfix = " + bugfixclonescount);
        System.out.println("number of clones related to both late propagation and bugfix = " + lpbugfixclonescount);
        System.out.println("% of bug-fix clones that are also related to late propagation = " + (float) lpbugfixclonescount * 100 / bugfixclonescount);

        System.out.println("\n\nnumber of bug-fix changes related to clones = " + totalbugfixchangecount);
        System.out.println("number of bug-fix changes related to late propagation in clones = " + totallpbugfixchangecount);
        System.out.println("% of bug-fix changes related to late propagation in clones = " + (float) totallpbugfixchangecount * 100 / totalbugfixchangecount);
    }

    //what proportion of clones are related to bug-fix.
    public void investigation5(int clonetype) {
        String bugfixcommits = " " + getBugFixCommits() + " ";
        String bugfixclones = "";

        for (int i = 1; i < cp.revisionCount; i++) {
            System.out.println("revision = " + i);
            if (bugfixcommits.contains(" " + (i + 1) + " ")) {
                SingleClone[] clones = da.getClones(i, clonetype);
                for (int j = 0; clones[j] != null; j++) {
                    if (Integer.parseInt(clones[j].changecount) > 0) {
                        if (!bugfixclones.contains(" " + clones[j].globalcloneid + " ")) {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
            }
        }
        //total count of clones created during evolution.
        int clonecount = getMaxGlobalCloneID(clonetype);
        int bugfixclonecount = bugfixclones.trim().split("[ ]+").length;

        System.out.println("\n\ntotal count of clones = " + clonecount);
        System.out.println("count of bug-fix clones = " + bugfixclonecount);
        System.out.println("% of bug-fix clones = " + (float) bugfixclonecount * 100 / clonecount);
    }

    public void investigation7(int clonetype) {
        class bugfixcommit {

            int commit = 0;
            String changedclones = "";
        }

        bugfixcommit[] commits = new bugfixcommit[10000];
        int count = 0;

        String bugfixcommits = " " + getBugFixCommits() + " ";
        String bugfixclones = "";

        for (int i = 1; i < cp.revisionCount; i++) {
            System.out.println("revision = " + i);
            if (bugfixcommits.contains(" " + (i + 1) + " ")) {
                commits[count] = new bugfixcommit();
                commits[count].commit = i;

                SingleClone[] clones = da.getClones(i, clonetype);
                for (int j = 0; clones[j] != null; j++) {
                    if (Integer.parseInt(clones[j].changecount) > 0) {
                        commits[count].changedclones += " " + clones[j].globalcloneid + " ";
                        if (!bugfixclones.contains(" " + clones[j].globalcloneid + " ")) {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
                count++;
            }
        }

        class similaritypreservingcochange {

            int gcid1 = -1, gcid2 = -1;
            int commit;
        }
        similaritypreservingcochange[] spcos = new similaritypreservingcochange[100000];
        String spco = "";
        int spcocount = 0;

        String spcomethodclones = "";
        String spcoblockclones = "";

        for (int i = 0; commits[i] != null; i++) {
            if (commits[i].changedclones.trim().length() > 0) {
                //make the pairs of clone fragments.
                String cclones = commits[i].changedclones.trim();
                int l = cclones.split("[ ]+").length;

                for (int j = 0; j < l - 1; j++) {
                    int gcid1 = Integer.parseInt(cclones.split("[ ]+")[j].trim());
                    for (int k = j + 1; k < l; k++) {
                        int gcid2 = Integer.parseInt(cclones.split("[ ]+")[k].trim());
                        int result = isSimilarityPreservingCochange(gcid1, gcid2, commits[i].commit, clonetype);
                        if (result == 1) {
                            spcos[spcocount] = new similaritypreservingcochange();
                            spcos[spcocount].gcid1 = gcid1;
                            spcos[spcocount].gcid2 = gcid2;
                            spcos[spcocount].commit = commits[i].commit;
                            spcocount++;

                            if (!spco.contains(" " + gcid1 + " ")) {
                                spco += " " + gcid1 + " ";
                            }
                            if (!spco.contains(" " + gcid2 + " ")) {
                                spco += " " + gcid2 + " ";
                            }

                            // are gcid1 and gcid2 method clones?
                            int mclone1 = isMethodClone(gcid1, clonetype, commits[i].commit);
                            int mclone2 = isMethodClone(gcid2, clonetype, commits[i].commit);

                            if (mclone1 == 1) {
                                if (!spcomethodclones.contains(" " + gcid1 + " ")) {
                                    spcomethodclones += " " + gcid1 + " ";
                                }
                            }
                            if (mclone2 == 1) {
                                if (!spcomethodclones.contains(" " + gcid2 + " ")) {
                                    spcomethodclones += " " + gcid2 + " ";
                                }
                            }
                        }
                    }
                }
            }
        }

        int spcomethodclonecount = 0;
        if (spcomethodclones.trim().length() > 0) {
            spcomethodclonecount = spcomethodclones.trim().split("[ ]+").length;
        }

        //percentage of bugfix clones that showed spco.
        int spcoclonecount = 0;
        if (spco.trim().length() > 0) {
            spcoclonecount = spco.trim().split("[ ]+").length;
        }

        int bugfixclonecount = 0;
        if (bugfixclones.trim().length() > 0) {
            bugfixclonecount = bugfixclones.trim().split("[ ]+").length;
        }

        float percentage = 0;
        if (bugfixclonecount > 0) {
            percentage = spcoclonecount * 100 / bugfixclonecount;
        }
        System.out.println("bug-fix clones = " + bugfixclones);
        System.out.println("bug-fix clones having similarity preserving co-change = " + spco);
        System.out.println("bug-fix clone count = " + bugfixclonecount);
        System.out.println("count of bug-fix clones having spco = " + spcoclonecount);
        System.out.println("percentage of clones that showed SPCO = " + percentage);

        System.out.println("count of SPCO method clones = " + spcomethodclonecount);
        System.out.println("count of spco block clones = " + (spcoclonecount - spcomethodclonecount));

        System.out.println("count of SPCO = " + spcocount);
    }

    public void investigation8(int clonetype) {
        String bugfixcommits = " " + getBugFixCommits() + " ";
        String bugfixclones = "";

        for (int i = 1; i < cp.revisionCount; i++) {
            System.out.println("revision = " + i);
            if (bugfixcommits.contains(" " + (i + 1) + " ")) {
                SingleClone[] clones = da.getClones(i, clonetype);
                for (int j = 0; clones[j] != null; j++) {
                    if (Integer.parseInt(clones[j].changecount) > 0) {
                        if (!bugfixclones.contains(" " + clones[j].globalcloneid + " ")) {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
            }
        }

        SingleClonePair[] clonepairs = da.getClonePairs(cp.revisionCount, clonetype);
        String spcpcloneslastrevision = "";

        SingleSPCPClonePair[] spcppairs = da.getSPCPClones(clonetype);
        String spcpclones = "";
        for (int i = 0; spcppairs[i] != null; i++) {
            if (!spcpclones.contains(" " + spcppairs[i].globalcloneid1 + " ")) {
                spcpclones += " " + spcppairs[i].globalcloneid1 + " ";
            }
            if (!spcpclones.contains(" " + spcppairs[i].globalcloneid2 + " ")) {
                spcpclones += " " + spcppairs[i].globalcloneid2 + " ";
            }

            //is the pair present in the last revision?
            int j = 0;
            for (j = 0; clonepairs[j] != null; j++) {
                if ((spcppairs[i].globalcloneid1.equals(clonepairs[j].globalcloneid1) && spcppairs[i].globalcloneid2.equals(clonepairs[j].globalcloneid2))
                        || (spcppairs[i].globalcloneid2.equals(clonepairs[j].globalcloneid1) && spcppairs[i].globalcloneid1.equals(clonepairs[j].globalcloneid2))) {
                    if (!spcpcloneslastrevision.contains(" " + spcppairs[i].globalcloneid1 + " ")) {
                        spcpcloneslastrevision += " " + spcppairs[i].globalcloneid1 + " ";
                    }
                    if (!spcpcloneslastrevision.contains(" " + spcppairs[i].globalcloneid2 + " ")) {
                        spcpcloneslastrevision += " " + spcppairs[i].globalcloneid2 + " ";
                    }
                    break;
                }
            }
        }

        String bugfixspcpclones = "";
        String bugfixspcpcloneslastrevision = "";
        int l = 0;
        if (bugfixclones.trim().length() > 0) {
            l = bugfixclones.trim().split("[ ]+").length;
        }
        for (int i = 0; i < l; i++) {
            String bfclone = bugfixclones.trim().split("[ ]+")[i].trim();
            if (spcpclones.contains(" " + bfclone + " ")) {
                bugfixspcpclones += " " + bfclone + " ";
            }
            if (spcpcloneslastrevision.contains(" " + bfclone + " ")) {
                bugfixspcpcloneslastrevision += " " + bfclone + " ";
            }
        }

        int bfcount = 0;
        if (bugfixclones.trim().length() > 0) {
            bfcount = bugfixclones.trim().split("[ ]+").length;
        }

        int spcpcount = 0;
        if (spcpclones.trim().length() > 0) {
            spcpcount = spcpclones.trim().split("[ ]+").length;
        }

        int bfspcpcount = 0;
        if (bugfixspcpclones.trim().length() > 0) {
            bfspcpcount = bugfixspcpclones.trim().split("[ ]+").length;
        }

        int bfspcpcountlr = 0;
        if (bugfixspcpcloneslastrevision.trim().length() > 0) {
            bfspcpcountlr = bugfixspcpcloneslastrevision.trim().split("[ ]+").length;
        }

        System.out.println("\n\nbug-fix clone count = " + bfcount);
        System.out.println("spcp clone count = " + spcpcount);
        System.out.println("bug-fix spcp clone count = " + bfspcpcount);
        System.out.println("bug-fix spcp clone count in last revision = " + bfspcpcountlr);
    }

    public int isSimilarityPreservingCochange(int gcid1, int gcid2, int revision, int clonetype) {
        int result = 0;

        SingleClonePair[] pairs = da.getClonePairs(revision, clonetype);
        for (int i = 0; pairs[i] != null; i++) {
            //if the clones make pair in this revision.
            if ((pairs[i].globalcloneid1.equals(gcid1 + "") && pairs[i].globalcloneid2.equals(gcid2 + ""))
                    || (pairs[i].globalcloneid1.equals(gcid2 + "") && pairs[i].globalcloneid2.equals(gcid1 + ""))) {
                SingleClonePair[] pairs2 = da.getClonePairs(revision + 1, clonetype);
                for (int j = 0; pairs2[j] != null; j++) {
                    //if the clones make pair in the next revision.
                    if ((pairs2[j].globalcloneid1.equals(gcid1 + "") && pairs2[j].globalcloneid2.equals(gcid2 + ""))
                            || (pairs2[j].globalcloneid1.equals(gcid2 + "") && pairs2[j].globalcloneid2.equals(gcid1 + ""))) {
                        return 1;
                    }
                }
            }
        }

        return result;
    }

    public BugFixCommit[] getCloneBugFixCommits(int clonetype) {
        BugFixCommit[] commits = new BugFixCommit[10000];
        int count = 0;

        String bugfixcommits = " " + getBugFixCommits() + " ";
        String bugfixclones = "";

        try {
            BufferedWriter br = new BufferedWriter(new FileWriter(cp.subject_system + "/" + "bugfixcommits.txt"));
            br.write(bugfixcommits);
            br.close();
        } catch (Exception e) {
            System.out.println("problem in writing bugfixcommits.");
        }

        for (int i = 1; i < cp.revisionCount; i++) {
            System.out.println("revision = " + i);
            if (bugfixcommits.contains(" " + (i + 1) + " ")) {
                commits[count] = new BugFixCommit();
                commits[count].commit = i;

                SingleClone[] clones = da.getClones(i, clonetype);
                for (int j = 0; clones[j] != null; j++) {
                    if (Integer.parseInt(clones[j].changecount) > 0) {
                        commits[count].changedclones += " " + clones[j].globalcloneid + " ";
                        if (isMethodClone(Integer.parseInt(clones[j].globalcloneid), clonetype, i) == 1) {
                            commits[count].changedmethodclones += " " + clones[j].globalcloneid + " ";
                        }

                        if (!bugfixclones.contains(" " + clones[j].globalcloneid + " ")) {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
                count++;
            }
        }
        return commits;
    }

    //the bug fix commits and the clones modified in those commits.
    public void investigation6(int clonetype) {

        BugFixCommit[] commits = getCloneBugFixCommits(clonetype);

        //total count of clones created during evolution.        
        //int clonecount = getMaxGlobalCloneID (clonetype);
        //int bugfixclonecount = bugfixclones.trim().split("[ ]+").length;
        int repeated = 0, nonrepeated = 0;
        String repeatedclones = "", allclones = "";

        //printing the bugfix commits for the purpose of manual analysis.
        for (int i = 0; commits[i] != null; i++) {
            if (commits[i].changedclones.trim().length() > 0) {
                System.out.println("bugfix commit = " + commits[i].commit + ",   affected clones = " + commits[i].changedclones + ", affected method clones = " + commits[i].changedmethodclones);

                //looping through all the affected clones.
                int l = commits[i].changedclones.trim().split("[ ]+").length;
                for (int j = 0; j < l; j++) {
                    String aclone = " " + commits[i].changedclones.trim().split("[ ]+")[j].trim() + " ";
                    if (aclone.equals(" -1 ")) {
                        continue;
                    }
                    if (!allclones.contains(aclone)) {
                        allclones += aclone;
                    }
                    int k = 0;
                    for (k = 0; k < i; k++) {
                        if (commits[k].changedclones.contains(aclone)) {
                            repeated++;
                            if (!repeatedclones.contains(aclone)) {
                                repeatedclones += aclone;
                            }
                            break;
                        }
                    }
                    if (k == i) {
                        nonrepeated++;
                    }
                }

            }
        }

        int aclones = allclones.trim().split("[ ]+").length;
        int rclones = repeatedclones.trim().split("[ ]+").length;

        System.out.println("total number of clones that experienced bugs = " + aclones);
        System.out.println("repeatedly experienced bugs = " + rclones + ", the clones that repeatedly experienced bugs = " + repeatedclones);
        System.out.println("% of clones that repeatedly experienced bugs = " + ((float) rclones * 100 / aclones));

        /*System.out.println ("\n\ntotal count of clones = "+clonecount);
        System.out.println ("count of bug-fix clones = "+bugfixclonecount);
        System.out.println ("% of bug-fix clones = "+(float)bugfixclonecount*100/clonecount);*/
    }

    class bugfixgroup {

        int commit = 0;
        String clonegroup = "";
        String affectedclones = "";
        String affectedglobalcloneids = "";
        String affectedSPCPclones = "";

    }

    //dispersion of clone bugs.
    public bugfixgroup[] investigation9(int clonetype) {
        class bugfixcommit {

            int commit = 0;
            String changedclones = "";
            String changedmethodclones = "";
        }

        bugfixcommit[] commits = new bugfixcommit[10000];
        int count = 0;

        bugfixgroup[] groups = new bugfixgroup[10000];
        int gcount = 0;

        String bugfixcommits = " " + getBugFixCommits() + " ";

        for (int i = 1; i < cp.revisionCount; i++) {
            System.out.println("revision = " + i);
            if (bugfixcommits.contains(" " + (i + 1) + " ")) {
                commits[count] = new bugfixcommit();
                commits[count].commit = i;

                SingleClone[] clones = da.getClones(i, clonetype);
                for (int j = 0; clones[j] != null; j++) {
                    if (Integer.parseInt(clones[j].changecount) > 0) {
                        commits[count].changedclones += " " + clones[j].cloneid + " ";
                    }
                }

                int l = commits[count].changedclones.trim().split("[ ]+").length;
                if (commits[count].changedclones.trim().length() == 0) {
                    l = 0;
                }

                for (int j = 0; j < l; j++) {
                    int aclone = Integer.parseInt(commits[count].changedclones.trim().split("[ ]+")[j].trim());

                    //check whether this clone is already included in a group.
                    int gc = 0;
                    for (gc = 0; gc < gcount; gc++) {
                        if (groups[gc].commit == i && groups[gc].clonegroup.contains(" " + aclone + " ")) {
                            groups[gc].affectedclones += " " + aclone + " ";
                            break;
                        }
                    }
                    if (gc == gcount) //the clone was not included in any group.
                    {
                        groups[gcount] = new bugfixgroup();
                        groups[gcount].commit = i;
                        groups[gcount].clonegroup = getCloneGroup(i, clonetype, aclone);
                        groups[gcount].affectedclones = " " + aclone + " ";
                        gcount++;
                    }
                }
                count++;
            }
        }

        //traversing through the groups.
        int sumgroups = 0;
        int sumaffecteds = 0;
        int cases = 0;
        String allcommits = "";
        String spcocommits = "";
        for (int i = 0; i < gcount; i++) {
            System.out.println("group count = " + (i + 1));
            System.out.println("\tcommit = " + groups[i].commit);
            System.out.println("\tgroup = " + groups[i].clonegroup);
            System.out.println("\taffected clones = " + groups[i].affectedclones);
            System.out.println("\tclone fragment count in group = " + groups[i].clonegroup.trim().split("[ ]+").length + ", no. of affected clones = " + groups[i].affectedclones.trim().split("[ ]+").length);

            if (!allcommits.contains(" " + groups[i].commit + " ")) {
                allcommits += " " + groups[i].commit + " ";
            }

            if (groups[i].affectedclones.trim().split("[ ]+").length > 1) {
                if (!spcocommits.contains(" " + groups[i].commit + " ")) {
                    spcocommits += " " + groups[i].commit + " ";
                }

                cases++;
                sumgroups += groups[i].clonegroup.trim().split("[ ]+").length;
                sumaffecteds += groups[i].affectedclones.trim().split("[ ]+").length;
            }
        }

        System.out.println("affected group count = " + gcount);
        System.out.println("dispersion of bugs = " + ((float) sumaffecteds * 100 / sumgroups) + ", total =  " + sumgroups + ", affected = " + sumaffecteds);
        System.out.println("number of SPCO cases = " + cases);
        System.out.println("number of bugs = " + allcommits.trim().split("[ ]+").length + ", bugs: " + allcommits);
        System.out.println("number of replicated bugs = " + spcocommits.trim().split("[ ]+").length + ", bugs: " + spcocommits);

        return groups;
    }

    public void investigation10(int clonetype) throws Exception {
        bugfixgroup[] groups = investigation9(clonetype);
        VisualizeCode vc = new VisualizeCode();
        BufferedWriter br = new BufferedWriter(new FileWriter("h://htmlfile.html"));
        int groupno = 0;

        for (int i = 0; groups[i] != null; i++) {
            int commit = groups[i].commit;
            String clones = groups[i].clonegroup;
            String aclones = groups[i].affectedclones;

            if (aclones.trim().split("[ ]+").length < 2) {
                continue;
            }
            groupno++;

            br.write("<br/>Clone Group Number = " + groupno);
            br.write("<br/>Commit = " + commit);
            br.write("<br/>Clone Group = " + clones);
            br.write("<br/>Affected Clones = " + aclones);

            aclones = clones;

            int len = aclones.trim().split("[ ]+").length;
            for (int j = 0; j < len; j++) {
                int aclone = Integer.parseInt(aclones.trim().split("[ ]+")[j].trim());
                String[][] clonechange = vc.getCloneChanges(aclone, clonetype, commit);
                String cloneinfo = vc.getCloneInfo(aclone, clonetype, commit);

                String tablerow1 = "<tr><td>Clone id = " + aclone + "<br/>" + cloneinfo + "</td></tr>";

                String tablerow2 = "<tr><td><table  border = '1'>";
                for (int k = 0; !clonechange[k][0].equals("-99"); k++) {
                    tablerow2 += "<tr><td>" + clonechange[k][0] + "</td><td>" + clonechange[k][1] + "</td><td>" + clonechange[k][2] + "</td><td>" + clonechange[k][3] + "</td></tr>";
                }
                tablerow2 += "</table></td></tr>";

                String table = "<table border = '1'>" + tablerow1 + tablerow2 + "</table>";

                br.write("<br/>" + table);
            }
        }
        br.close();

        JOptionPane.showMessageDialog(null, "A file named 'htmlfile.html' has been created in drive h:. So, the file path is 'h:/htmlfile.html'. Please open this file for manual investigation.");
    }

    public String getCloneGroup(int revision, int clonetype, int cloneid) {
        SingleClonePair[] clonepairs = da.getClonePairs(revision, clonetype);
        String group = " " + cloneid + " ", pgroup = "";

        while (true) {
            if (!group.equals(pgroup)) {
                pgroup = group;
                int l = group.trim().split("[ ]+").length;
                for (int i = 0; i < l; i++) {
                    int cid = Integer.parseInt(group.trim().split("[ ]+")[i].trim());

                    //get the peer clones of cid.
                    for (int j = 0; clonepairs[j] != null; j++) {
                        if (clonepairs[j].cloneid1.equals("" + cid) && !group.contains(" " + clonepairs[j].cloneid2 + " ")) {
                            group += " " + clonepairs[j].cloneid2 + " ";
                        }
                        if (clonepairs[j].cloneid2.equals("" + cid) && !group.contains(" " + clonepairs[j].cloneid1 + " ")) {
                            group += " " + clonepairs[j].cloneid1 + " ";
                        }
                    }
                }
            } else {
                break;
            }
        }

        return group;
    }

    public int getMaxGlobalCloneID(int cloneType) {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(cp.subject_system + "/maxglobalcloneid_type" + cloneType + ".txt")));
            String str = br.readLine().trim();
            int mcid = Integer.parseInt(str);
            br.close();
            return mcid;
        } catch (Exception e) {
            System.out.println("error in getMaxGlobalCloneID. " + e);
        }
        return 0;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
