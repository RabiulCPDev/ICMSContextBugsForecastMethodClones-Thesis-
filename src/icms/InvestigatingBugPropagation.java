/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package icms;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.JOptionPane;

/**
 *
 * @author Manishankar
 */



class CodeFragment
{
    CommonParameters cp = new CommonParameters ();
    int revision = -1;
    String filepath = "";
    int startline = -1, endline = -1;
    int changed = -1;
    int gcid;
    String [] lines = new String[1000];
    
    public void showMinimum ()
    {
        System.out.println ("\n" + revision + ": " + gcid + ", " + filepath + ", " + startline + " - " + endline + ", " + changed);
    }
    
    public void getFragment ()
    {
        String absfilepath = cp.subject_system + "/repository/version-" + revision + "/"+ filepath;
        try
        {
            BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (absfilepath)));
            String str = "";
            
            int line = 0;
            int i =0;
            while ((str = br.readLine ()) != null)
            {
                line++;
                if (line > endline) {break;}
                if (line >= startline && line <= endline)
                {
                    lines[i] = str.trim();
                    i++;
                }
            }
        }
        catch (Exception e)
        {
            System.out.println ("error code = 3.");
        }        
    }
    
    public void showFragment ()
    {
        String absfilepath = cp.subject_system + "/repository/version-" + revision + "/"+ filepath;
        try
        {
            BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (absfilepath)));
            String str = "";
            
            System.out.println ("\n" + revision + ": " + gcid + "," + filepath + ", " + startline + " - " + endline);
            System.out.println ("-------------------------------------------");
            int line = 0;
            int i =0;
            while ((str = br.readLine ()) != null)
            {
                line++;
                if (line > endline) {break;}
                if (line >= startline && line <= endline)
                {
                    lines[i] = str.trim();
                    i++;
                    System.out.println (str);
                }
            }
            System.out.println ("-------------------------------------------");
        }
        catch (Exception e)
        {
            System.out.println ("error code = 2.");
        }
    }
}



public class InvestigatingBugPropagation extends javax.swing.JFrame {

    /**
     * Creates new form InvestigatingBugPropagation
     */
    public InvestigatingBugPropagation() {
        initComponents();
    }
    
    CommonParameters cp = new CommonParameters ();
    DatabaseAccess da = new DatabaseAccess ();
    ChangeAnalysis ca = new ChangeAnalysis ();
    
    int pattern1pair = 0, pattern2pair = 0, allpatternpair = 0;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jTextField7 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analyze Bug Propagation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Manually Analyze Bug Propagation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        jTextField3.setText("jTextField3");

        jTextField4.setText("jTextField4");

        jLabel1.setText("GCID1");

        jLabel2.setText("GCID2");

        jLabel3.setText("Clone Type");

        jLabel4.setText("Revision");

        jTextField5.setText("jTextField5");

        jLabel5.setText("Clone Type");

        jButton3.setText("Context Bugs");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField6.setText("clone type");

        jButton4.setText("Analyzing Cochange Candidates");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField7.setText("clone type");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(14, 14, 14)))
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(14, 14, 14)))
                                .addGap(53, 53, 53)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jLabel4))))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField5))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField6)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField7))
                        .addGap(183, 183, 183))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(133, 133, 133)
                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    public void analyzePartialFixingOfPropagatedBugs ()
    {
        pattern1pair = 0;
        pattern2pair = 0;
        allpatternpair = 0;
        
        int clonetype = Integer.parseInt (jTextField5.getText ());
        
        
        //statistical variables.
        String bugfixclones = "", bugpropagationclones = "";
        String bugpropagation_methodclones = "", bugpropagation_blockclones = "";
        int count_bugpropagation_samefile = 0, count_bugpropagation_differentfile = 0;
        int count_bugs = 0, count_propagatedbugs = 0, count_bugfixclones = 0, count_bugpropagationclones = 0, count_bugpropagationpairs = 0;
        int count_clones = 0;
        
        
        
        
        InvestigatingBugproneness ib = new InvestigatingBugproneness ();
        BugFixCommit [] bfcommits = ib.getCloneBugFixCommits(clonetype);
        String output = "";
        
        for (int i =0; bfcommits[i] != null;i++)
        {            
            int propagationgot = 0;
            
            if (bfcommits[i].changedclones.trim().length() > 0)
            {
                count_bugs++; //counting the number of bugs.
                int len = bfcommits[i].changedclones.trim().split("[ ]+").length;
                if (len > 1)
                {
                    for (int i1 = 0;i1<len;i1++)
                    {
                        int gcid1 = Integer.parseInt(bfcommits[i].changedclones.trim().split("[ ]+")[i1].trim());                                                
                        String clonesThatMakePair = getClonesThatMadePairWithCloneID(gcid1, clonetype, bfcommits[i].commit);
                        String clonesNotFixed = getSet1MinusSet2(clonesThatMakePair, bfcommits[i].changedclones);
                        
                        if (clonesNotFixed.trim().length() == 0){continue;}
                        
                        int len2 = clonesNotFixed.trim().split("[ ]+").length;
                        for (int i2 = 0;i2<len2;i2++)
                        {
                            int gcid2 = Integer.parseInt(clonesNotFixed.trim().split("[ ]+")[i2].trim());
                            
                            if (1 > 0)
                            {                                
                                System.out.println ("\npair: "+gcid1+" (changed) "+gcid2 + " (not changed), revision: "+ bfcommits[i].commit);
                                
                                
                                int propagation = analyzeClonePair(gcid1, gcid2, clonetype, bfcommits[i].commit);
                                if (propagation > 0)
                                { 
                                    System.out.println ("Got partial fixing of propagated bugs. Commit diff = "+(bfcommits[i].commit-propagation));
                                    
                                    
                                    count_bugpropagationpairs++;
                                    
                                    if (!bugpropagationclones.contains (" "+gcid1+" "))
                                    {
                                        bugpropagationclones += " "+gcid1+" ";
                                    }
                                    if (!bugpropagationclones.contains (" "+gcid2+" "))
                                    {
                                        bugpropagationclones += " "+gcid2+" ";
                                    }
                                    
                                    
                                    //are the clone fragments from the same file or different files.
                                    if (isSameFilePair (gcid1, gcid2, bfcommits[i].commit, clonetype) == 1)
                                    {
                                        count_bugpropagation_samefile++;
                                    }
                                    else
                                    {
                                        count_bugpropagation_differentfile++;
                                    }
                                    
                                    
                                    
                                    
                                    
                                    //are the bug propagation clones method clones or block clones?
                                    if (isMethodClone(gcid1, bfcommits[i].commit, clonetype) == 1)
                                    {
                                        if (!bugpropagation_methodclones.contains (" "+gcid1+" "))
                                        {
                                            bugpropagation_methodclones += " " + gcid1 + " ";
                                        }
                                    }
                                    else
                                    {
                                        if (!bugpropagation_blockclones.contains (" "+gcid1+" "))
                                        {
                                            bugpropagation_blockclones += " " + gcid1 + " ";
                                        }
                                    }
                                    
                                    if (isMethodClone(gcid2, bfcommits[i].commit, clonetype) == 1)
                                    {
                                        if(!bugpropagation_methodclones.contains (" "+gcid2+" "))
                                        {
                                            bugpropagation_methodclones += " " + gcid2 + " ";
                                        }
                                    }
                                    else
                                    {
                                        if (!bugpropagation_blockclones.contains (" "+gcid2+" "))
                                        {
                                            bugpropagation_blockclones += " " + gcid2 + " ";
                                        }
                                    }
                                    
                                            
                                    
                                    
                                    
                                    //do bug propagation occurs in the same file or across files.                                                                        
                                    
                                    
                                    
                                    
                                    propagationgot++;
                                   
                                    System.out.println ("propagation occurred.-------------------"); 
                                    
                                }
                                else 
                                { 
                                    System.out.println ("propagation did not occur."); 
                                    
                                }
                            }
                        }
                    }
                }
            }
            if (propagationgot > 0)
            {
                count_propagatedbugs++;
            }
        }
        
        count_bugfixclones = bugfixclones.trim().split("[ ]+").length;
        count_bugpropagationclones = bugpropagationclones.trim().split("[ ]+").length;
        
        int count_bugpropagation_methodclones = bugpropagation_methodclones.trim().split("[ ]+").length;
        int count_bugpropagation_blockclones = bugpropagation_blockclones.trim().split("[ ]+").length;
        
        
        //getting the total count of clones.
        
        try
        {
            da.connect ();
            da.executeQuery("select count(distinct(globalcloneid)) cnt from type"+clonetype+"clones");
            if (da.result.next())
            {
                count_clones = Integer.parseInt (da.result.getString("cnt"));
            }
            da.disconnect ();
        }
        catch (Exception e)
        {
            
        }
        
        
        
        System.out.println ("\nResults:\n");
                
        System.out.println ("count of bugs = "+count_bugs);        
        System.out.println ("count of propagated bugs = "+count_propagatedbugs);        
        System.out.println ("percentage of propagated bugs = "+((float)count_propagatedbugs*100/count_bugs));
        
        
        System.out.println ("\n");
        
        
        System.out.println ("count of clones = "+count_clones);        
        System.out.println ("count of bugfix clones = "+count_bugfixclones);        
        System.out.println ("count of bugpropagation clones = "+count_bugpropagationclones);        
        System.out.println ("percentage of bugpropagation clones with respect to all clones = "+((float)count_bugpropagationclones*100/count_clones));        
        System.out.println ("percentage of bugpropagation clones with respect to bugfix clones = " +((float)count_bugpropagationclones*100/count_bugfixclones));        
        System.out.println ("total bug propagation pairs = "+allpatternpair);
        System.out.println ("pattern1 bug propagation pairs = "+pattern1pair);
        System.out.println ("pattern2 bug propagation pairs = "+pattern2pair);
        
        System.out.println ("\n---------------------new results-------------------------") ;
        System.out.println ("count of bug propagation clones that are method clones = "+count_bugpropagation_methodclones);
        System.out.println ("count of bug propagation clones that are block clones = "+count_bugpropagation_blockclones) ;
        
        System.out.println ("\ncount of bug propagations occurring in the same file = "+count_bugpropagation_samefile);
        System.out.println ("count of bug propagations occurring in different file = "+count_bugpropagation_differentfile);
        
        System.out.println ("done.");        
        
    }
    
    public void analyzeBugPropagation ()
    {
        pattern1pair = 0;
        pattern2pair = 0;
        allpatternpair = 0;
        
        int clonetype = Integer.parseInt (jTextField5.getText ());
        
        
        //statistical variables.
        String bugfixclones = "", bugpropagationclones = "";
        String bugpropagation_methodclones = "", bugpropagation_blockclones = "";
        int count_bugpropagation_samefile = 0, count_bugpropagation_differentfile = 0;
        int count_bugs = 0, count_propagatedbugs = 0, count_bugfixclones = 0, count_bugpropagationclones = 0, count_bugpropagationpairs = 0;
        int count_clones = 0;
        
        
        
        
        InvestigatingBugproneness ib = new InvestigatingBugproneness ();
        BugFixCommit [] bfcommits = ib.getCloneBugFixCommits(clonetype);
        String output = "";
        
        for (int i =0; bfcommits[i] != null;i++)
        {            
            int propagationgot = 0;
            
            if (bfcommits[i].changedclones.trim().length() > 0)
            {
                count_bugs++; //counting the number of bugs.
                int len = bfcommits[i].changedclones.trim().split("[ ]+").length;
                if (len > 1)
                {
                    for (int i1 = 0;i1<len-1;i1++)
                    {
                        int gcid1 = Integer.parseInt(bfcommits[i].changedclones.trim().split("[ ]+")[i1].trim());                        
                        if (!bugfixclones.contains (" "+gcid1+" ")) { bugfixclones += " "+gcid1+" "; }
                        
                        for (int i2 = i1+1;i2<len;i2++)
                        {
                            int gcid2 = Integer.parseInt(bfcommits[i].changedclones.trim().split("[ ]+")[i2].trim());                            
                            if (!bugfixclones.contains (" "+gcid2+" ")) { bugfixclones += " "+gcid2+" "; }
                            
                                
                                                        
                            
                            //if (gcid1 == -1 || gcid2 == -1) {continue;}
                            
                            int makespair = da.isClonePair(gcid1, gcid2, clonetype, bfcommits[i].commit);
                            
                            int makepairnext = da.isClonePair(gcid1, gcid2, clonetype, bfcommits[i].commit+1);                            
                            if (makepairnext == 0) {continue;}
                            
                            if (makespair > 0)
                            {                                
                                System.out.println ("\npair: "+gcid1+" "+gcid2 + ", revision: "+ bfcommits[i].commit);
                                
                                
                                if (gcid1 == -1 || gcid2 == -1) 
                                {
                                    System.out.println ("this is not a real pair.");
                                    continue;
                                }
                                
                                
                                int propagation = analyzeClonePair(gcid1, gcid2, clonetype, bfcommits[i].commit);
                                if (propagation > 0)
                                { 
                                    System.out.println ("Got bug-propagation. Commit diff = "+(bfcommits[i].commit-propagation));
                                    
                                    
                                    count_bugpropagationpairs++;
                                    
                                    if (!bugpropagationclones.contains (" "+gcid1+" "))
                                    {
                                        bugpropagationclones += " "+gcid1+" ";
                                    }
                                    if (!bugpropagationclones.contains (" "+gcid2+" "))
                                    {
                                        bugpropagationclones += " "+gcid2+" ";
                                    }
                                    
                                    
                                    //are the clone fragments from the same file or different files.
                                    if (isSameFilePair (gcid1, gcid2, bfcommits[i].commit, clonetype) == 1)
                                    {
                                        count_bugpropagation_samefile++;
                                    }
                                    else
                                    {
                                        count_bugpropagation_differentfile++;
                                    }
                                    
                                    
                                    
                                    
                                    
                                    //are the bug propagation clones method clones or block clones?
                                    if (isMethodClone(gcid1, bfcommits[i].commit, clonetype) == 1)
                                    {
                                        if (!bugpropagation_methodclones.contains (" "+gcid1+" "))
                                        {
                                            bugpropagation_methodclones += " " + gcid1 + " ";
                                        }
                                    }
                                    else
                                    {
                                        if (!bugpropagation_blockclones.contains (" "+gcid1+" "))
                                        {
                                            bugpropagation_blockclones += " " + gcid1 + " ";
                                        }
                                    }
                                    
                                    if (isMethodClone(gcid2, bfcommits[i].commit, clonetype) == 1)
                                    {
                                        if(!bugpropagation_methodclones.contains (" "+gcid2+" "))
                                        {
                                            bugpropagation_methodclones += " " + gcid2 + " ";
                                        }
                                    }
                                    else
                                    {
                                        if (!bugpropagation_blockclones.contains (" "+gcid2+" "))
                                        {
                                            bugpropagation_blockclones += " " + gcid2 + " ";
                                        }
                                    }
                                    
                                            
                                    
                                    
                                    
                                    //do bug propagation occurs in the same file or across files.                                                                        
                                    
                                    
                                    
                                    
                                    propagationgot++;
                                   
                                    System.out.println ("propagation occurred.-------------------"); 
                                    
                                }
                                else 
                                { 
                                    System.out.println ("propagation did not occur."); 
                                    
                                }
                            }
                        }
                    }
                }
            }
            if (propagationgot > 0)
            {
                count_propagatedbugs++;
            }
        }
        
        count_bugfixclones = bugfixclones.trim().split("[ ]+").length;
        count_bugpropagationclones = bugpropagationclones.trim().split("[ ]+").length;
        
        int count_bugpropagation_methodclones = bugpropagation_methodclones.trim().split("[ ]+").length;
        int count_bugpropagation_blockclones = bugpropagation_blockclones.trim().split("[ ]+").length;
        
        
        //getting the total count of clones.
        
        try
        {
            da.connect ();
            da.executeQuery("select count(distinct(globalcloneid)) cnt from type"+clonetype+"clones");
            if (da.result.next())
            {
                count_clones = Integer.parseInt (da.result.getString("cnt"));
            }
            da.disconnect ();
        }
        catch (Exception e)
        {
            
        }
        
        
        
        System.out.println ("\nResults:\n");
                
        System.out.println ("count of bugs = "+count_bugs);        
        System.out.println ("count of propagated bugs = "+count_propagatedbugs);        
        System.out.println ("percentage of propagated bugs = "+((float)count_propagatedbugs*100/count_bugs));
        
        
        System.out.println ("\n");
        
        
        System.out.println ("count of clones = "+count_clones);        
        System.out.println ("count of bugfix clones = "+count_bugfixclones);        
        System.out.println ("count of bugpropagation clones = "+count_bugpropagationclones);        
        System.out.println ("percentage of bugpropagation clones with respect to all clones = "+((float)count_bugpropagationclones*100/count_clones));        
        System.out.println ("percentage of bugpropagation clones with respect to bugfix clones = " +((float)count_bugpropagationclones*100/count_bugfixclones));        
        System.out.println ("total bug propagation pairs = "+allpatternpair);
        System.out.println ("pattern1 bug propagation pairs = "+pattern1pair);
        System.out.println ("pattern2 bug propagation pairs = "+pattern2pair);
        
        System.out.println ("\n---------------------new results-------------------------") ;
        System.out.println ("count of bug propagation clones that are method clones = "+count_bugpropagation_methodclones);
        System.out.println ("count of bug propagation clones that are block clones = "+count_bugpropagation_blockclones) ;
        
        System.out.println ("\ncount of bug propagations occurring in the same file = "+count_bugpropagation_samefile);
        System.out.println ("count of bug propagations occurring in different file = "+count_bugpropagation_differentfile);
        
        System.out.println ("done.");        
    }
    
    
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        analyzeBugPropagation ();
        //analyzePartialFixingOfPropagatedBugs ();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
    
    
    public int isMethodClone (int globalcloneid, int revision, int clonetype)
    {                
        try
        {   
            DatabaseAccess dbase = new DatabaseAccess ();
            
            //getting method id.
            dbase.connect();
            dbase.executeQuery ("select startline, endline, methodid from type"+clonetype+"clones where globalcloneid = "+globalcloneid+" and revision = "+revision);
            dbase.result.next();
            int methodid = Integer.parseInt(dbase.result.getString ("methodid"));
            int clonestartline = Integer.parseInt(dbase.result.getString ("startline"));
            int cloneendline = Integer.parseInt(dbase.result.getString ("endline"));
            dbase.disconnect();
            
            //getting method informatino.
            dbase.connect ();
            dbase.executeQuery ("select startline, endline from methods where revision = "+revision+" and methodid = "+methodid);
            dbase.result.next();
            int methodstartline = Integer.parseInt (dbase.result.getString("startline"));
            int methodendline = Integer.parseInt (dbase.result.getString("endline"));
            dbase.disconnect ();
            
            
            int methodlength = methodendline - methodstartline;
            int clonelength = cloneendline - clonestartline;
            
            if (methodlength -clonelength <2)
            {
                return 1;
            }
        }
        catch (Exception e)
        {
            System.out.println ("error: "+e);
        }
        
        return 0;
    }
    
    
    public int isSameFilePair (int gcid1, int gcid2, int revision, int clonetype)
    {
        try
        {
            DatabaseAccess da = new DatabaseAccess ();

            da.connect ();
            da.executeQuery ("select filepath from type"+clonetype+"clones where revision = "+revision+" and globalcloneid = "+gcid1);
            da.result.next ();
            String file1 = da.result.getString ("filepath");
            da.disconnect ();
            
            da.connect ();
            da.executeQuery ("select filepath from type"+clonetype+"clones where revision = "+revision+" and globalcloneid = "+gcid2);
            da.result.next ();
            String file2 = da.result.getString ("filepath");
            da.disconnect ();
            
            if (file1.equals (file2)) { return 1; }

            return 0;
        }
        catch (Exception e)
        {
            System.out.println ("error: "+e);
            return 0;
        }
    }
    
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        //analyzeClonePairManually (178, 179, 3, 1079);
        //analyzeClonePairManually (210, 211, 3, 1235);
        //analyzeClonePairManually (186, 187, 3, 1235);
        //analyzeClonePairManually (184, 185, 3, 1466);
        
        int gcid1 = Integer.parseInt(jTextField1.getText());
        int gcid2 = Integer.parseInt(jTextField2.getText());
        int clonetype = Integer.parseInt(jTextField3.getText());
        int revision = Integer.parseInt(jTextField4.getText());
        
        
        System.out.println ("------------------------------------------------------------------");
        System.out.println ("------------------------------------------------------------------");
        analyzeClonePairManually (gcid1, gcid2, clonetype, revision);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    
    public String getClonesThatMadePairWithCloneID (int gcid, int cloneType, int revision)
    {
        String result = "";
        try
        {            
            int gcid1 = 0, gcid2 = 0, toadd = 0;
            
            DatabaseAccess dbase = new DatabaseAccess ();
            dbase.connect();
            dbase.executeQuery ("select globalcloneid1, globalcloneid2 from type"+cloneType+"clonepairs where (globalcloneid1 = "+gcid+" or globalcloneid2 = "+gcid+") and revision = "+revision);
            while (dbase.result.next ())
            {
                gcid1 = Integer.parseInt(dbase.result.getString ("globalcloneid1"));
                gcid2 = Integer.parseInt(dbase.result.getString ("globalcloneid2"));
                if (gcid1 == gcid) { toadd = gcid2; }
                if (gcid2 == gcid) {toadd = gcid1;}
                
                if (!result.contains (" "+toadd+" ")) { result += " " + toadd + " "; }
            }
            dbase.disconnect ();
        }
        catch (Exception e)
        {
            //
        }
        return result;
    }
    
    public String getSet1MinusSet2 (String set1, String set2)
    {
        String result = "", id = "";        
        
        int l1 = set1.trim().split("[ ]+").length;
        for (int i =0;i<l1;i++)
        {
            id = set1.trim().split("[ ]+")[i].trim();
            if (!set2.contains (" "+id+" ")) { result += " " + id + " "; }
        }
        
        return result;
    }
    
    
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        pattern1pair = 0;
        pattern2pair = 0;
        allpatternpair = 0;
        
        int clonetype = Integer.parseInt (jTextField6.getText ());
        
        
        //statistical variables.
        String bugfixclones = "";
        int count_bugs = 0, count_bugfixclones = 0;
        int count_clones = 0;
        
        
        
        
        InvestigatingBugproneness ib = new InvestigatingBugproneness ();
        BugFixCommit [] bfcommits = ib.getCloneBugFixCommits(clonetype);
        
        for (int i =0; bfcommits[i] != null;i++)
        {            
            if (bfcommits[i].changedclones.trim().length() < 1) {continue;}
            count_bugs++;
            int len = bfcommits[i].changedclones.trim().split("[ ]+").length;
            
            for (int i1 = 0;i1<len;i1++)
            {
                int gcid1 = Integer.parseInt(bfcommits[i].changedclones.trim().split("[ ]+")[i1].trim());
                String otherClonesInPair = getClonesThatMadePairWithCloneID (gcid1, clonetype, bfcommits[i].commit);
                String otherClonesInPairNotChangedInBugFix = getSet1MinusSet2 (otherClonesInPair, bfcommits[i].changedclones);
                
                System.out.println ("\n\nRevision = "+bfcommits[i].commit+"\n"+"Experienced bug-fix = "+gcid1);
                System.out.println ("other clones that made pair = "+otherClonesInPair);
                System.out.println ("Did not experience bug-fix = "+otherClonesInPairNotChangedInBugFix);
            }
        }
        
        count_bugfixclones = bugfixclones.trim().split("[ ]+").length;
        
        try
        {
            da.connect ();
            da.executeQuery("select count(distinct(globalcloneid)) cnt from type"+clonetype+"clones");
            if (da.result.next())
            {
                count_clones = Integer.parseInt (da.result.getString("cnt"));
            }
            da.disconnect ();
        }
        catch (Exception e)
        {
            
        }
        
        
        
        System.out.println ("\nResults:\n");
                
        System.out.println ("count of bugs = "+count_bugs);        
        System.out.println ("count of clones = "+count_clones);        
        System.out.println ("count of bugfix clones = "+count_bugfixclones);        
        
        System.out.println ("done.");        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    public String getChangedClones (int revision, int cloneType)
    {
        String result = "";
        
        try
        {
            da.connect();
            da.executeQuery ("select globalcloneid from type"+cloneType+"clones where revision = "+revision +" and changecount > 0");
            while (da.result.next ())
            {
                result += " "+da.result.getString ("globalcloneid")+" ";
            }
            da.disconnect();
        }
        catch (Exception e)
        {
            //
        }        
        return result;
    }
    
    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        int cloneType = Integer.parseInt(jTextField7.getText ());
        
        for (int r =1;r<cp.revisionCount;r++)
        {
            System.out.println ("\nrevision = "+r);
            String changedClones = getChangedClones (r, cloneType);
            if (changedClones.trim().length() == 0) {continue;}
            int length = changedClones.trim().split("[ ]+").length;
            
            for (int i =0;i<length;i++)
            {
                int gcid = Integer.parseInt(changedClones.trim().split("[ ]+")[i].trim());
                String otherClonesInPair = getClonesThatMadePairWithCloneID (gcid, cloneType, r);
                String otherClonesInPairNotChanged = getSet1MinusSet2 (otherClonesInPair, changedClones);
                String otherClonesInPairChanged = getSet1MinusSet2 (otherClonesInPair, otherClonesInPairNotChanged);
                
                System.out.println ("revision = "+r);
                System.out.println ("changed clone id = "+gcid);
                System.out.println ("other clones making pair with clone id = "+otherClonesInPair);
                System.out.println ("other clones making pair with clone id and changed = "+otherClonesInPairChanged);
                System.out.println ("other clones making pair with clone id and not changed = "+otherClonesInPairNotChanged);
            }
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    public int analyzeClonePair (int gcid1, int gcid2, int clonetype, int revision)
    {
        int bugpropagation=0;
        
        CodeFragment cf1 = getCodeFragment (gcid1, clonetype, revision);
        CodeFragment cf2 = getCodeFragment (gcid2, clonetype, revision);
                
        CodeFragment ncf1 = new CodeFragment ();
        CodeFragment ncf2 = new CodeFragment ();
        
        //ncf1 = getInstanceInNextRevision(cf1);
        //ncf2 = getInstanceInNextRevision(cf2);               
        
        ncf1 = getCodeFragment (gcid1, clonetype, revision+1);
        ncf2 = getCodeFragment (gcid2, clonetype, revision+1);
        
        
        if (ncf1 == null || ncf2 == null) { return 0; }
        if (areDifferentFragments (cf1, ncf1) == 0 || areDifferentFragments (cf2, ncf2) == 0) { return 0; }
        
        
        //if (ncf1.changed == 0 || ncf2.changed == 0) { return 0; }
                
        CodeFragment pcf1 = new CodeFragment ();
        CodeFragment pcf2 = new CodeFragment ();
        
        int pcf1changed = 0, pcf2changed = 0;
        
        while (true)
        {
            //pcf1 = getInstanceInPreviousRevision(cf1);
            //pcf2 = getInstanceInPreviousRevision(cf2);

            pcf1 = getCodeFragment (cf1.gcid, clonetype, cf1.revision-1);
            pcf2 = getCodeFragment (cf2.gcid, clonetype, cf2.revision-1);
            
            
            if (pcf1 == null)
            {
                pcf1 = getInstanceInPreviousRevision(cf1);
            }
            if (pcf2 == null)
            {
                pcf2 = getInstanceInPreviousRevision(cf2);
            }
            
            
            if (pcf1 == null && pcf2 == null)
            {                    
                System.out.println ("both null double checked.");
                bugpropagation = cf1.revision;
                
                if (pcf1changed > 0) { System.out.println ("fragment 1 changed"); }
                if (pcf2changed > 0) { System.out.println ("fragment 2 changed"); }
                                
                //this line is only for Freecol and jedit.
                if (cf1.revision == 3791) { bugpropagation = 0; }
                
                if (bugpropagation >0 )
                {
                    pattern1pair++;
                    allpatternpair++;
                }
                
                break;
            }
            
            
            if ((pcf1 == null && pcf2 != null)||(pcf2 == null && pcf1 != null))
            {
                if (pcf1 == null) { System.out.println (gcid1+" is younger."); }
                if (pcf2 == null) { System.out.println (gcid2+" is younger."); }
                bugpropagation = cf1.revision;  
                
                pattern2pair++;
                allpatternpair++;
                
                break;
            }
            
            if (areDifferentFragments (cf1, pcf1)== 1) { pcf1changed++; }
            if (areDifferentFragments (cf2, pcf2)== 1) { pcf2changed++; }
            
            
            //if (pcf1.changed == 1) { pcf1changed++; }
            //if (pcf2.changed == 1) { pcf2changed++; }
            
            if (pcf1changed > 0 && pcf2changed > 0)
            {
                System.out.println("both changed.");
                break;
            }
            
            cf1 = pcf1;
            cf2 = pcf2;
        }
        return bugpropagation;
    }

    
    public int areDifferentFragments (CodeFragment cf1, CodeFragment cf2)
    {
        try
        {
            cf1.getFragment();
            cf2.getFragment();

            int i =0;
            while (cf1.lines[i] != null || cf2.lines[i] != null)
            {
                if (!cf1.lines[i].trim().equals (cf2.lines[i].trim()) && (cf1.lines[i].trim().length() > 0 || cf2.lines[i].trim().length() > 0))
                {
                    return 1;
                }
                i++;
            }

            return 0;
        }
        catch (Exception e)
        {
            System.out.println ("error occurred. ignored it.");
            return 0;
        }
    }
    
    
    
    public CodeFragment getCodeFragment (int gcid, int clonetype, int revision)
    {
        SingleClone clone = da.getCloneInfo(gcid, clonetype, revision);
        if (clone == null) { return null; }
        
        CodeFragment cf = new CodeFragment ();
        cf.changed = Integer.parseInt(clone.changecount);
        cf.filepath = clone.filepath;
        cf.startline = Integer.parseInt(clone.startline);
        cf.endline = Integer.parseInt(clone.endline);
        cf.revision = revision;
        cf.gcid = gcid;  
        
        return cf;
    }
    
    public int analyzeClonePairManually (int gcid1, int gcid2, int clonetype, int revision)
    {
        int bugpropagation=0;
        
        CodeFragment cf1 = getCodeFragment (gcid1, clonetype, revision);
        CodeFragment cf2 = getCodeFragment (gcid2, clonetype, revision);
                
        CodeFragment ncf1 = new CodeFragment ();
        CodeFragment ncf2 = new CodeFragment ();
        
        //ncf1 = getInstanceInNextRevision(cf1);
        //ncf2 = getInstanceInNextRevision(cf2);               
        
        ncf1 = getCodeFragment (gcid1, clonetype, revision+1);
        ncf2 = getCodeFragment (gcid2, clonetype, revision+1);
        
        if (ncf1 == null || ncf2 == null) { return 0; }
        if (areDifferentFragments (cf1, ncf1) == 0 || areDifferentFragments (cf2, ncf2) == 0) { return 0; }                        
        
        
        ncf1.showMinimum(); ncf1.showFragment();
        ncf2.showMinimum(); ncf2.showFragment();

        cf1.showMinimum(); cf1.showFragment();
        cf2.showMinimum(); cf2.showFragment();
        
        
        CodeFragment pcf1 = new CodeFragment ();
        CodeFragment pcf2 = new CodeFragment ();
        
        int pcf1changed = 0, pcf2changed = 0;
        
        while (true)
        {
            //pcf1 = getInstanceInPreviousRevision(cf1);
            //pcf2 = getInstanceInPreviousRevision(cf2);

            pcf1 = getCodeFragment (cf1.gcid, clonetype, cf1.revision-1);
            pcf2 = getCodeFragment (cf2.gcid, clonetype, cf2.revision-1);
            
            if (pcf1 == null)
            {
                pcf1 = getInstanceInPreviousRevision(cf1);
            }
            if (pcf2 == null)
            {
                pcf2 = getInstanceInPreviousRevision(cf2);
            }
            
            
            if (pcf1 == null && pcf2 == null)
            {
                System.out.println ("both null double checked.");
                break;
            }
            
            
            if ((pcf1 == null && pcf2 != null)||(pcf2 == null && pcf1 != null))
            {
                if (pcf1 == null) { System.out.println (gcid1+" is younger."); pcf2.showMinimum(); pcf2.showFragment(); }
                if (pcf2 == null) { System.out.println (gcid2+" is younger."); pcf1.showMinimum(); pcf1.showFragment(); }
                bugpropagation = 1;  
                
                break;
            }
            
            if (areDifferentFragments (cf1, pcf1)== 1) { pcf1changed++; }
            if (areDifferentFragments (cf2, pcf2)== 1) { pcf2changed++; }
            
            
            //if (pcf1.changed == 1) { pcf1changed++; }
            //if (pcf2.changed == 1) { pcf2changed++; }
            
            if (pcf1changed > 0 && pcf2changed > 0)
            {
                System.out.println("both changed.");
                break;
            }
            
            pcf1.showMinimum();
            pcf1.showFragment();
            pcf2.showMinimum();
            pcf2.showFragment();
            
            cf1 = pcf1;
            cf2 = pcf2;
        }
        return bugpropagation;
    }
    
    public CodeFragment getInstanceInNextRevision (CodeFragment cf)
    {
        CodeFragment instance = new CodeFragment ();
        
        int crevision = cf.revision;
        int nrevision = crevision+1;
        
        int nstartline = 999999999;
        int nendline = -1;
        
        int changed = 0;
        
        String cfilepath = cp.subject_system + "/repository/version-" + crevision + "/"+ cf.filepath;
        String nfilepath = cp.subject_system + "/repository/version-" + nrevision + "/"+ cf.filepath;
        
        File file = new File (nfilepath);
        if (!file.exists()) { return null; }
        
        
        String [][] filecompare = ca.compareFiles(cfilepath, nfilepath);
                
        for (int i =0;filecompare[i][0] != null;i++)
        {
            String ln = filecompare[i][0].trim();
            if (ln.length() == 0) {continue;}
            int line = Integer.parseInt(ln);
            if (line > cf.endline) {break;}
            if (line >= cf.startline && line <= cf.endline)
            {
                String nln = filecompare[i][2].trim();
                if (nln.trim().length() > 0)
                {
                    int nline = Integer.parseInt (nln);
                    if (nstartline > nline){ nstartline = nline; }
                    if (nendline < nline) { nendline = nline; }                
                }
                if (!filecompare[i][1].trim().equals (filecompare[i][3].trim()))
                {
                    if (filecompare[i][1].trim().length() > 0 || filecompare[i][3].trim().length() > 0)
                    {
                        changed = 1;
                    }
                }
            }
        }
        
        if (nendline == -1)
        {
            return null;
        }
        
        instance.revision = nrevision;
        instance.filepath = cf.filepath;
        instance.startline = nstartline;
        instance.endline = nendline;
        instance.changed = changed;
        instance.gcid = cf.gcid;
        
        return instance;
    }
    
    
    
    public CodeFragment getInstanceInPreviousRevision (CodeFragment cf)
    {
        CodeFragment instance = new CodeFragment ();
        
        int crevision = cf.revision;
        int prevision = crevision-1;
        
        int pstartline = 999999999;
        int pendline = -1;
        
        int changed = 0;
        int similarity = 0;
        
        String cfilepath = cp.subject_system + "/repository/version-" + crevision + "/"+ cf.filepath;
        String pfilepath = cp.subject_system + "/repository/version-" + prevision + "/"+ cf.filepath;
        
        File file = new File (pfilepath);
        if (!file.exists()) { return null; }
        
        
        String [][] filecompare = ca.compareFiles(pfilepath, cfilepath);
                
        for (int i =0;filecompare[i][0] != null;i++)
        {
            String ln = filecompare[i][2].trim();
            if (ln.length() == 0) {continue;}
            int line = Integer.parseInt(ln);
            if (line > cf.endline) {break;}
            if (line >= cf.startline && line <= cf.endline)
            {
                String pln = filecompare[i][0].trim();
                if (pln.trim().length() > 0)
                {
                    int pline = Integer.parseInt (pln);
                    if (pstartline > pline){ pstartline = pline; }
                    if (pendline < pline) { pendline = pline; }                
                }
                if (!filecompare[i][1].trim().equals (filecompare[i][3].trim()))
                {
                    if (filecompare[i][1].trim().length() > 0 || filecompare[i][3].trim().length() > 0)
                    {
                        changed = 1;
                    }
                }
                if (filecompare[i][1].trim().equals (filecompare[i][3].trim()))
                {
                    if (filecompare[i][1].trim().length() > 0 )
                    {
                        similarity = 1;
                    }
                }
            }
        }
        
        if (similarity == 0) { return null; }
        
        if (pendline == -1)
        {
            return null;
        }
        
        instance.revision = prevision;
        instance.filepath = cf.filepath;
        instance.startline = pstartline;
        instance.endline = pendline;
        instance.changed = changed;
        instance.gcid = cf.gcid;
        
        return instance;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPropagation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvestigatingBugPropagation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
