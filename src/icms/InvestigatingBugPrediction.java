/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package icms;

import java.io.BufferedWriter;
import java.io.FileWriter;

/**
 *
 * @author Manishankar
 */
public class InvestigatingBugPrediction extends javax.swing.JFrame {

    CommonParameters cp = new CommonParameters ();
    DatabaseAccess da = new DatabaseAccess ();
    
    
    /**
     * Creates new form InvestigatingBugPrediction
     */
    public InvestigatingBugPrediction() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Bug Prediction in Code Clones");

        jButton1.setText("Investigation 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("What is the percentage of the cases where a bug-fix change occurred to a clone fragment that was changed previously?");

        jTextField1.setText("jTextField1");

        jLabel3.setText("Clone Type");

        jButton2.setText("Investigation 2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("What is the probability that a clone fragment that was changed previously will experience a bug in the future?");

        jButton3.setText("Investigation 3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Frequency and recency ranking of the previously changed clone fragments");

        jButton4.setText("Investigation 4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("Recency based ranking of the clone fragments that were not changed before");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(336, 336, 336)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel6))
                .addContainerGap(242, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        investigation1 (getclonetype ());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        investigation2(getclonetype());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        investigation3(getclonetype());
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        investigation4(getclonetype());
        
    }//GEN-LAST:event_jButton4ActionPerformed

    
    public int getclonetype ()
    {
        return Integer.parseInt (jTextField1.getText().trim());
    }    
    
    public void investigation1 (int clonetype)
    {
        InvestigatingBugproneness ib = new InvestigatingBugproneness();
        
        class bugfixcommit
        {
            int commit = 0;
            String changedclones = "";
            String changedmethodclones = "";
        }
        
        bugfixcommit [] commits = new bugfixcommit[10000];
        int count = 0;
        
        
        String bugfixcommits = " " + ib.getBugFixCommits () + " ";
        String bugfixclones = "";
        
        try
        {
            BufferedWriter br = new BufferedWriter (new FileWriter (cp.subject_system+"/"+"bugfixcommits.txt"));
            br.write (bugfixcommits);
            br.close();
        }
        catch (Exception e)
        {
            System.out.println ("problem in writing bugfixcommits.");
        }
        
        for (int i =1;i<cp.revisionCount;i++)
        {
            System.out.println ("revision = "+i);
            if (bugfixcommits.contains (" " + (i+1) + " "))
            {
                commits[count] = new bugfixcommit ();
                commits[count].commit = i;
                        
                SingleClone [] clones = da.getClones(i, clonetype);                
                for (int j=0;clones[j] != null;j++)
                {
                    if (Integer.parseInt(clones[j].changecount) > 0)
                    {
                        commits[count].changedclones += " " + clones[j].globalcloneid + " ";
                        if (ib.isMethodClone(Integer.parseInt(clones[j].globalcloneid), clonetype, i) == 1) { commits[count].changedmethodclones += " " + clones[j].globalcloneid + " "; }
                            
                        if (!bugfixclones.contains (" "+clones[j].globalcloneid+" "))
                        {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
                count++;
            }
        }
                
        
        //total count of clones created during evolution.        
        int clonecount = ib.getMaxGlobalCloneID (clonetype);
        int bugfixclonecount = bugfixclones.trim().split("[ ]+").length;
        

        int repeated = 0, nonrepeated = 0;
        String repeatedclones = "", allclones = "";
        int previouslychanged = 0, notpreviouslychanged = 0;
        
        //printing the bugfix commits for the purpose of manual analysis.
        for (int i =0;commits[i] != null;i++)
        {
            if (commits[i].changedclones.trim().length() > 0)
            {
                System.out.println ("bugfix commit = "+commits[i].commit + ",   affected clones = "+commits[i].changedclones + ", affected method clones = "+commits[i].changedmethodclones);
                
                //looping through all the affected clones.
                int l = commits[i].changedclones.trim().split("[ ]+").length;
                for (int j = 0; j<l ; j++)
                {
                    String aclone = " "+commits[i].changedclones.trim().split("[ ]+")[j].trim()+" ";
                    
                    if (aclone.equals(" -1 ")) {continue;}
                    if (wasChangedPreviously(Integer.parseInt(aclone.trim()), commits[i].commit, clonetype) > 0)
                    {
                        previouslychanged++;
                    }
                    else
                    {
                        notpreviouslychanged++;
                    }
                    if (!allclones.contains(aclone)) { allclones += aclone; }
                    int k = 0;
                    for (k=0;k<i;k++)
                    {
                        if (commits[k].changedclones.contains(aclone))
                        {
                            repeated++; 
                            if (!repeatedclones.contains(aclone)) {repeatedclones += aclone;}
                            break;
                        }
                    }
                    if (k == i)
                    {
                        nonrepeated++;
                    }
                }
                
            }
            
        }
        
        int aclones = allclones.trim().split("[ ]+").length;
        int rclones = repeatedclones.trim().split("[ ]+").length;
        
        System.out.println ("total number of clones that experienced bugs = "+aclones);
        System.out.println ("repeatedly experienced bugs = "+rclones+ ", the clones that repeatedly experienced bugs = "+repeatedclones);
        System.out.println ("% of clones that repeatedly experienced bugs = "+((float)rclones*100/aclones));        

        
        System.out.println ("Number of clone fragments that got changed before experiencing a bug = "+previouslychanged);
        System.out.println ("Number of clone fragments that did not get changed before experiencing a bug = "+notpreviouslychanged);        
        
        System.out.println ("% of clone fragments that got changed before experiencing a bug = "+(float)(previouslychanged*100)/(previouslychanged+notpreviouslychanged));
        System.out.println ("% of clone fragments that did not get changed before experiencing a bug = "+(float)(notpreviouslychanged*100)/(previouslychanged+notpreviouslychanged));        
    }
    
    public void investigation2 (int clonetype)
    {
        InvestigatingBugproneness ib = new InvestigatingBugproneness();
        
        class bugfixcommit
        {
            int commit = 0;
            String changedclones = "";
            String changedmethodclones = "";
        }
        
        bugfixcommit [] commits = new bugfixcommit[10000];
        int count = 0;
        
        
        String bugfixcommits = " " + ib.getBugFixCommits () + " ";
        String bugfixclones = "";
        
        try
        {
            BufferedWriter br = new BufferedWriter (new FileWriter (cp.subject_system+"/"+"bugfixcommits.txt"));
            br.write (bugfixcommits);
            br.close();
        }
        catch (Exception e)
        {
            System.out.println ("problem in writing bugfixcommits.");
        }
        
        for (int i =1;i<cp.revisionCount;i++)
        {
            System.out.println ("revision = "+i);
            if (bugfixcommits.contains (" " + (i+1) + " "))
            {
                commits[count] = new bugfixcommit ();
                commits[count].commit = i;
                        
                SingleClone [] clones = da.getClones(i, clonetype);                
                for (int j=0;clones[j] != null;j++)
                {
                    if (Integer.parseInt(clones[j].changecount) > 0)
                    {
                        commits[count].changedclones += " " + clones[j].globalcloneid + " ";
                        if (ib.isMethodClone(Integer.parseInt(clones[j].globalcloneid), clonetype, i) == 1) { commits[count].changedmethodclones += " " + clones[j].globalcloneid + " "; }
                            
                        if (!bugfixclones.contains (" "+clones[j].globalcloneid+" "))
                        {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
                count++;
            }
        }
                
        
        //total count of clones created during evolution.        
        int clonecount = ib.getMaxGlobalCloneID (clonetype);
        int bugfixclonecount = bugfixclones.trim().split("[ ]+").length;
        

        int repeated = 0, nonrepeated = 0;
        String repeatedclones = "", allclones = "";
        int previouslychanged = 0, notpreviouslychanged = 0;
        int previouslychanged_clones_count = 0, previouslynotchanged_clones_count = 0;
        int previouslychanged_clones_count_bugfix = 0, previouslynotchanged_clones_count_bugfix = 0;
        
        //printing the bugfix commits for the purpose of manual analysis.
        for (int i =0;commits[i] != null;i++)
        {
            if (commits[i].changedclones.trim().length() > 0)
            {
                System.out.println ("bugfix commit = "+commits[i].commit + ",   affected clones = "+commits[i].changedclones + ", affected method clones = "+commits[i].changedmethodclones);
                
                //find which clone fragments were changed previously and are alive in this commit.
                String [] results = getPreviouslyChangedClones(commits[i].commit, clonetype);
                
                String previouslychanged_clones = " "+results[0]+" ";
                String previouslynotchanged_clones = " "+results[1]+" ";                                
                
                previouslychanged_clones_count += previouslychanged_clones.trim().split("[ ]+").length;
                previouslynotchanged_clones_count += previouslynotchanged_clones.trim().split("[ ]+").length;
                
                
                //looping through all the affected clones.
                int l = commits[i].changedclones.trim().split("[ ]+").length;
                for (int j = 0; j<l ; j++)
                {
                    String aclone = " "+commits[i].changedclones.trim().split("[ ]+")[j].trim()+" ";                                        
                    
                    if (aclone.equals(" -1 ")) {continue;}
                    if (previouslychanged_clones.contains (aclone))
                    {
                        previouslychanged_clones_count_bugfix++;
                    }
                    else
                    {
                        previouslynotchanged_clones_count_bugfix++;
                    }
                    
                    if (wasChangedPreviously(Integer.parseInt(aclone.trim()), commits[i].commit, clonetype) > 0)
                    {
                        previouslychanged++;
                    }
                    else
                    {
                        notpreviouslychanged++;
                    }
                    if (!allclones.contains(aclone)) { allclones += aclone; }
                    int k = 0;
                    for (k=0;k<i;k++)
                    {
                        if (commits[k].changedclones.contains(aclone))
                        {
                            repeated++; 
                            if (!repeatedclones.contains(aclone)) {repeatedclones += aclone;}
                            break;
                        }
                    }
                    if (k == i)
                    {
                        nonrepeated++;
                    }
                }
                
            }
            
        }
        
        int aclones = allclones.trim().split("[ ]+").length;
        int rclones = repeatedclones.trim().split("[ ]+").length;
        
        System.out.println ("total number of clones that experienced bugs = "+aclones);
        System.out.println ("repeatedly experienced bugs = "+rclones+ ", the clones that repeatedly experienced bugs = "+repeatedclones);
        System.out.println ("% of clones that repeatedly experienced bugs = "+((float)rclones*100/aclones));        

        
        System.out.println ("Number of clone fragments that got changed before experiencing a bug = "+previouslychanged);
        System.out.println ("Number of clone fragments that did not get changed before experiencing a bug = "+notpreviouslychanged);        
        
        System.out.println ("% of clone fragments that got changed before experiencing a bug = "+(float)(previouslychanged*100)/(previouslychanged+notpreviouslychanged));
        System.out.println ("% of clone fragments that did not get changed before experiencing a bug = "+(float)(notpreviouslychanged*100)/(previouslychanged+notpreviouslychanged));        
        

        
        System.out.println ("\npreviously changed clones = "+previouslychanged_clones_count);
        System.out.println ("previously not changed clones = "+previouslynotchanged_clones_count);
        System.out.println ("previously changed clones experienced bug-fix = "+previouslychanged_clones_count_bugfix);
        System.out.println ("previously not changed clones experienced bug-fix = "+previouslynotchanged_clones_count_bugfix);
        
        float f1 = (float)previouslychanged_clones_count*100/(previouslychanged_clones_count+previouslynotchanged_clones_count);
        System.out.println ("% of clone fragments that were changed in the previous evolution = "+f1);
        
        float f2 = (float)previouslynotchanged_clones_count*100/(previouslychanged_clones_count+previouslynotchanged_clones_count);
        System.out.println ("% of clone fragments that were not changed in the previous evolution = "+f2);                
        
        float p1 = (float)previouslychanged_clones_count_bugfix * 100 / previouslychanged_clones_count;
        System.out.println ("the probability that a clone fragment that was previously changed will experience a bug-fix = "+ p1);
        
        float p2 = (float)previouslynotchanged_clones_count_bugfix * 100 / previouslynotchanged_clones_count;
        System.out.println ("the probability that a clone fragment that was not previously changed will experience a bug-fix = "+ p2);        
    }

    public void investigation3 (int clonetype)
    {
        InvestigatingBugproneness ib = new InvestigatingBugproneness();
        
        class bugfixcommit
        {
            int commit = 0;
            String changedclones = "";
            String changedmethodclones = "";
        }
        
        bugfixcommit [] commits = new bugfixcommit[10000];
        int count = 0;
        
        
        String bugfixcommits = " " + ib.getBugFixCommits () + " ";
        String bugfixclones = "";
        
        try
        {
            BufferedWriter br = new BufferedWriter (new FileWriter (cp.subject_system+"/"+"bugfixcommits.txt"));
            br.write (bugfixcommits);
            br.close();
        }
        catch (Exception e)
        {
            System.out.println ("problem in writing bugfixcommits.");
        }
        
        for (int i =1;i<cp.revisionCount;i++)
        {
            System.out.println ("revision = "+i);
            if (bugfixcommits.contains (" " + (i+1) + " "))
            {
                commits[count] = new bugfixcommit ();
                commits[count].commit = i;
                        
                SingleClone [] clones = da.getClones(i, clonetype);                
                for (int j=0;clones[j] != null;j++)
                {
                    if (Integer.parseInt(clones[j].changecount) > 0)
                    {
                        commits[count].changedclones += " " + clones[j].globalcloneid + " ";
                        if (ib.isMethodClone(Integer.parseInt(clones[j].globalcloneid), clonetype, i) == 1) { commits[count].changedmethodclones += " " + clones[j].globalcloneid + " "; }
                            
                        if (!bugfixclones.contains (" "+clones[j].globalcloneid+" "))
                        {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
                count++;
            }
        }
                
        
        //total count of clones created during evolution.        
        int clonecount = ib.getMaxGlobalCloneID (clonetype);
        int bugfixclonecount = bugfixclones.trim().split("[ ]+").length;
        

        int repeated = 0, nonrepeated = 0;
        String repeatedclones = "", allclones = "";
        int previouslychanged = 0, notpreviouslychanged = 0;
        int previouslychanged_clones_count = 0, previouslynotchanged_clones_count = 0;
        int previouslychanged_clones_count_bugfix = 0, previouslynotchanged_clones_count_bugfix = 0;
        
        int total_frequency_rank = 0, total_freq = 0;
        int total_recency_rank = 0;
        int frequency_better = 0, recency_better = 0, both_equal = 0;
        
        //printing the bugfix commits for the purpose of manual analysis.
        for (int i =0;commits[i] != null;i++)
        {
            if (commits[i].changedclones.trim().length() > 0)
            {
                System.out.println ("bugfix commit = "+commits[i].commit + ",   affected clones = "+commits[i].changedclones + ", affected method clones = "+commits[i].changedmethodclones);
                
                //find which clone fragments were changed previously and are alive in this commit.
                String [] results = getPreviouslyChangedClones(commits[i].commit, clonetype);
                
                String previouslychanged_clones = " "+results[0]+" ";
                String previouslynotchanged_clones = " "+results[1]+" ";
                
                //String frequencies = getChangeFrequencyOfClones(previouslychanged_clones, commits[i].commit, clonetype);
                //String recencies = getChangeRecencyOfClones(previouslychanged_clones, commits[i].commit, clonetype);
                
                String previouslychanged_clones_frequency_sorted = getFrequencyBasedSorting(previouslychanged_clones, commits[i].commit, clonetype);
                String previouslychanged_clones_recency_sorted = getRecencyBasedSorting(previouslychanged_clones, commits[i].commit, clonetype);
                
                
                previouslychanged_clones_count += previouslychanged_clones.trim().split("[ ]+").length;
                previouslynotchanged_clones_count += previouslynotchanged_clones.trim().split("[ ]+").length;                                
                
                int frequency_rank = 0;
                int recency_rank = 0;
                
                //looping through all the affected clones.
                int l = commits[i].changedclones.trim().split("[ ]+").length;
                for (int j = 0; j<l ; j++)
                {
                    String aclone = " "+commits[i].changedclones.trim().split("[ ]+")[j].trim()+" ";  
                    
                    int frank = 0, rrank = 0;
                    
                    
                    //find frequency rank.
                    
                    int l1 = previouslychanged_clones_frequency_sorted.trim().split("[ ]+").length;
                    for (int n=0;n<l1;n++)
                    {
                        if (previouslychanged_clones_frequency_sorted.trim().split("[ ]+")[n].trim().equals(aclone.trim()))
                        {
                            frequency_rank += n+1;
                            total_frequency_rank += n+1;
                            total_freq++;
                            frank = n+1;
                            break;
                        }
                    }
                    
                    //find recency rank.
                    for (int n=0;n<l1;n++)
                    {
                        if (previouslychanged_clones_recency_sorted.trim().split("[ ]+")[n].trim().equals(aclone.trim()))
                        {
                            recency_rank += n+1;
                            total_recency_rank += n+1;
                            rrank = n+1;
                            break;
                        }
                    }
                    
                    if (frank != 0)
                    {
                        if (frank == rrank) {both_equal++;}
                        else if (frank < rrank) {frequency_better++;}
                        else { recency_better++; }
                    }
                    
                    
                    if (aclone.equals(" -1 ")) {continue;}
                    if (previouslychanged_clones.contains (aclone))
                    {
                        previouslychanged_clones_count_bugfix++;
                    }
                    else
                    {
                        previouslynotchanged_clones_count_bugfix++;
                    }
                    
                    if (wasChangedPreviously(Integer.parseInt(aclone.trim()), commits[i].commit, clonetype) > 0)
                    {
                        previouslychanged++;
                    }
                    else
                    {
                        notpreviouslychanged++;
                    }
                    if (!allclones.contains(aclone)) { allclones += aclone; }
                    int k = 0;
                    for (k=0;k<i;k++)
                    {
                        if (commits[k].changedclones.contains(aclone))
                        {
                            repeated++; 
                            if (!repeatedclones.contains(aclone)) {repeatedclones += aclone;}
                            break;
                        }
                    }
                    if (k == i)
                    {
                        nonrepeated++;
                    }
                }
                System.out.println ("--------------------------------------------------------------- both equal = "+both_equal+ ", frequency better = "+frequency_better + ", recency better = "+recency_better);
            }
            
        }
        
        int aclones = allclones.trim().split("[ ]+").length;
        int rclones = repeatedclones.trim().split("[ ]+").length;
        
        System.out.println ("total number of clones that experienced bugs = "+aclones);
        System.out.println ("repeatedly experienced bugs = "+rclones+ ", the clones that repeatedly experienced bugs = "+repeatedclones);
        System.out.println ("% of clones that repeatedly experienced bugs = "+((float)rclones*100/aclones));        

        
        System.out.println ("Number of clone fragments that got changed before experiencing a bug = "+previouslychanged);
        System.out.println ("Number of clone fragments that did not get changed before experiencing a bug = "+notpreviouslychanged);        
        
        System.out.println ("% of clone fragments that got changed before experiencing a bug = "+(float)(previouslychanged*100)/(previouslychanged+notpreviouslychanged));
        System.out.println ("% of clone fragments that did not get changed before experiencing a bug = "+(float)(notpreviouslychanged*100)/(previouslychanged+notpreviouslychanged));        
        

        
        System.out.println ("\npreviously changed clones = "+previouslychanged_clones_count);
        System.out.println ("previously not changed clones = "+previouslynotchanged_clones_count);
        System.out.println ("previously changed clones experienced bug-fix = "+previouslychanged_clones_count_bugfix);
        System.out.println ("previously not changed clones experienced bug-fix = "+previouslynotchanged_clones_count_bugfix);
        
        float f1 = (float)previouslychanged_clones_count*100/(previouslychanged_clones_count+previouslynotchanged_clones_count);
        System.out.println ("% of clone fragments that were changed in the previous evolution = "+f1);
        
        float f2 = (float)previouslynotchanged_clones_count*100/(previouslychanged_clones_count+previouslynotchanged_clones_count);
        System.out.println ("% of clone fragments that were not changed in the previous evolution = "+f2);                
        
        float p1 = (float)previouslychanged_clones_count_bugfix * 100 / previouslychanged_clones_count;
        System.out.println ("the probability that a clone fragment that was previously changed will experience a bug-fix = "+ p1);
        
        float p2 = (float)previouslynotchanged_clones_count_bugfix * 100 / previouslynotchanged_clones_count;
        System.out.println ("the probability that a clone fragment that was not previously changed will experience a bug-fix = "+ p2);        
        
        System.out.println ("\ntotal frequency rank = "+total_frequency_rank);
        System.out.println ("total recency rank = "+total_recency_rank);
        System.out.println ("previously changed clones experienced bugs = "+total_freq);
        System.out.println ("average frequency rank = "+(float)total_frequency_rank/previouslychanged_clones_count_bugfix);
        System.out.println ("average recency rank = "+(float)total_recency_rank/previouslychanged_clones_count_bugfix);
        System.out.println ("both equal = "+both_equal+ ", frequency better = "+frequency_better + ", recency better = "+recency_better);
    }

    public void investigation4 (int clonetype)
    {
        InvestigatingBugproneness ib = new InvestigatingBugproneness();
        
        class bugfixcommit
        {
            int commit = 0;
            String changedclones = "";
            String changedmethodclones = "";
        }
        
        bugfixcommit [] commits = new bugfixcommit[10000];
        int count = 0;
        
        
        String bugfixcommits = " " + ib.getBugFixCommits () + " ";
        String bugfixclones = "";
        
        try
        {
            BufferedWriter br = new BufferedWriter (new FileWriter (cp.subject_system+"/"+"bugfixcommits.txt"));
            br.write (bugfixcommits);
            br.close();
        }
        catch (Exception e)
        {
            System.out.println ("problem in writing bugfixcommits.");
        }
        
        for (int i =1;i<cp.revisionCount;i++)
        {
            System.out.println ("revision = "+i);
            if (bugfixcommits.contains (" " + (i+1) + " "))
            {
                commits[count] = new bugfixcommit ();
                commits[count].commit = i;
                        
                SingleClone [] clones = da.getClones(i, clonetype);                
                for (int j=0;clones[j] != null;j++)
                {
                    if (Integer.parseInt(clones[j].changecount) > 0)
                    {
                        commits[count].changedclones += " " + clones[j].globalcloneid + " ";
                        if (ib.isMethodClone(Integer.parseInt(clones[j].globalcloneid), clonetype, i) == 1) { commits[count].changedmethodclones += " " + clones[j].globalcloneid + " "; }
                            
                        if (!bugfixclones.contains (" "+clones[j].globalcloneid+" "))
                        {
                            bugfixclones += " " + clones[j].globalcloneid + " ";
                        }
                    }
                }
                count++;
            }
        }
                
        
        //total count of clones created during evolution.        
        int clonecount = ib.getMaxGlobalCloneID (clonetype);
        int bugfixclonecount = bugfixclones.trim().split("[ ]+").length;
        

        int repeated = 0, nonrepeated = 0;
        String repeatedclones = "", allclones = "";
        int previouslychanged = 0, notpreviouslychanged = 0;
        int previouslychanged_clones_count = 0, previouslynotchanged_clones_count = 0;
        int previouslychanged_clones_count_bugfix = 0, previouslynotchanged_clones_count_bugfix = 0;
        
        int total_frequency_rank = 0, total_freq = 0;
        int total_recency_rank = 0;
        int frequency_better = 0, recency_better = 0, both_equal = 0;
        
        int count_previously_not_changed_bugfix = 0, count_previously_not_changed_notbugfix = 0;
        int total_distance_bugfix = 0, total_distance_notbugfix = 0;
        
        
        
        //printing the bugfix commits for the purpose of manual analysis.
        for (int i =0;commits[i] != null;i++)
        {
            if (commits[i].changedclones.trim().length() > 0)
            {
                System.out.println ("bugfix commit = "+commits[i].commit + ",   affected clones = "+commits[i].changedclones + ", affected method clones = "+commits[i].changedmethodclones);
                
                //find which clone fragments were changed previously and are alive in this commit.
                String [] results = getPreviouslyChangedClones(commits[i].commit, clonetype);
                
                String previouslychanged_clones = " "+results[0]+" ";
                String previouslynotchanged_clones = " "+results[1]+" ";
                String previouslynotchanged_clones_bugfix = "";
                String previouslynotchanged_clones_notbugfix = "";
                
                //String frequencies = getChangeFrequencyOfClones(previouslychanged_clones, commits[i].commit, clonetype);
                //String recencies = getChangeRecencyOfClones(previouslychanged_clones, commits[i].commit, clonetype);
                
                String previouslychanged_clones_frequency_sorted = getFrequencyBasedSorting(previouslychanged_clones, commits[i].commit, clonetype);
                String previouslychanged_clones_recency_sorted = getRecencyBasedSorting(previouslychanged_clones, commits[i].commit, clonetype);
                
                
                previouslychanged_clones_count += previouslychanged_clones.trim().split("[ ]+").length;
                previouslynotchanged_clones_count += previouslynotchanged_clones.trim().split("[ ]+").length;                                
                
                int frequency_rank = 0;
                int recency_rank = 0;
                
                //looping through all the affected clones.
                int l = commits[i].changedclones.trim().split("[ ]+").length;
                for (int j = 0; j<l ; j++)
                {
                    String aclone = " "+commits[i].changedclones.trim().split("[ ]+")[j].trim()+" ";  
                    
                    int frank = 0, rrank = 0;
                    
                    
                    //find frequency rank.
                    
                    int l1 = previouslychanged_clones_frequency_sorted.trim().split("[ ]+").length;
                    for (int n=0;n<l1;n++)
                    {
                        if (previouslychanged_clones_frequency_sorted.trim().split("[ ]+")[n].trim().equals(aclone.trim()))
                        {
                            frequency_rank += n+1;
                            total_frequency_rank += n+1;
                            total_freq++;
                            frank = n+1;
                            break;
                        }
                    }
                    
                    //find recency rank.
                    for (int n=0;n<l1;n++)
                    {
                        if (previouslychanged_clones_recency_sorted.trim().split("[ ]+")[n].trim().equals(aclone.trim()))
                        {
                            recency_rank += n+1;
                            total_recency_rank += n+1;
                            rrank = n+1;
                            break;
                        }
                    }
                    
                    if (frank != 0)
                    {
                        if (frank == rrank) {both_equal++;}
                        else if (frank < rrank) {frequency_better++;}
                        else { recency_better++; }
                    }
                    
                    
                    if (aclone.equals(" -1 ")) {continue;}
                    if (previouslychanged_clones.contains (aclone))
                    {
                        previouslychanged_clones_count_bugfix++;
                    }
                    else
                    {
                        previouslynotchanged_clones_count_bugfix++;
                        previouslynotchanged_clones_bugfix += " " + aclone + " ";
                    }
                    
                    if (wasChangedPreviously(Integer.parseInt(aclone.trim()), commits[i].commit, clonetype) > 0)
                    {
                        previouslychanged++;
                    }
                    else
                    {
                        notpreviouslychanged++;
                    }
                    if (!allclones.contains(aclone)) { allclones += aclone; }
                    int k = 0;
                    for (k=0;k<i;k++)
                    {
                        if (commits[k].changedclones.contains(aclone))
                        {
                            repeated++; 
                            if (!repeatedclones.contains(aclone)) {repeatedclones += aclone;}
                            break;
                        }
                    }
                    if (k == i)
                    {
                        nonrepeated++;
                    }
                }
                
                int length = previouslynotchanged_clones.trim().split("[ ]+").length;
                for (int i1 = 0;i1<length;i1++)
                {
                    String aclone = " " + previouslynotchanged_clones.trim().split("[ ]+")[i1].trim()+" ";
                    if (!previouslynotchanged_clones_bugfix.contains (aclone))
                    {
                        previouslynotchanged_clones_notbugfix += " " + aclone + " ";
                    }
                }
                
                //so now we have two sets of clones:
                //previouslynotchanged_clones_bugfix  and previouslynotchanged_clones_notbugfix.
                
                count_previously_not_changed_bugfix += previouslynotchanged_clones_bugfix.trim().split("[ ]+").length;
                count_previously_not_changed_notbugfix += previouslynotchanged_clones_notbugfix.trim().split("[ ]+").length;                
                
                total_distance_bugfix += distanceOfPreviouslyNotChangedClones(previouslynotchanged_clones_bugfix, commits[i].commit, clonetype);
                total_distance_notbugfix += distanceOfPreviouslyNotChangedClones(previouslynotchanged_clones_notbugfix, commits[i].commit, clonetype);
                
                
                
                System.out.println ("--------------------------------------------------------------- both equal = "+both_equal+ ", frequency better = "+frequency_better + ", recency better = "+recency_better);
            }
            
        }
        
        int aclones = allclones.trim().split("[ ]+").length;
        int rclones = repeatedclones.trim().split("[ ]+").length;
        
        System.out.println ("total number of clones that experienced bugs = "+aclones);
        System.out.println ("repeatedly experienced bugs = "+rclones+ ", the clones that repeatedly experienced bugs = "+repeatedclones);
        System.out.println ("% of clones that repeatedly experienced bugs = "+((float)rclones*100/aclones));        

        
        System.out.println ("Number of clone fragments that got changed before experiencing a bug = "+previouslychanged);
        System.out.println ("Number of clone fragments that did not get changed before experiencing a bug = "+notpreviouslychanged);        
        
        System.out.println ("% of clone fragments that got changed before experiencing a bug = "+(float)(previouslychanged*100)/(previouslychanged+notpreviouslychanged));
        System.out.println ("% of clone fragments that did not get changed before experiencing a bug = "+(float)(notpreviouslychanged*100)/(previouslychanged+notpreviouslychanged));        
        

        
        System.out.println ("\npreviously changed clones = "+previouslychanged_clones_count);
        System.out.println ("previously not changed clones = "+previouslynotchanged_clones_count);
        System.out.println ("previously changed clones experienced bug-fix = "+previouslychanged_clones_count_bugfix);
        System.out.println ("previously not changed clones experienced bug-fix = "+previouslynotchanged_clones_count_bugfix);
        
        float f1 = (float)previouslychanged_clones_count*100/(previouslychanged_clones_count+previouslynotchanged_clones_count);
        System.out.println ("% of clone fragments that were changed in the previous evolution = "+f1);
        
        float f2 = (float)previouslynotchanged_clones_count*100/(previouslychanged_clones_count+previouslynotchanged_clones_count);
        System.out.println ("% of clone fragments that were not changed in the previous evolution = "+f2);                
        
        float p1 = (float)previouslychanged_clones_count_bugfix * 100 / previouslychanged_clones_count;
        System.out.println ("the probability that a clone fragment that was previously changed will experience a bug-fix = "+ p1);
        
        float p2 = (float)previouslynotchanged_clones_count_bugfix * 100 / previouslynotchanged_clones_count;
        System.out.println ("the probability that a clone fragment that was not previously changed will experience a bug-fix = "+ p2);        
        
        System.out.println ("\n\ntotal frequency rank = "+total_frequency_rank);
        System.out.println ("total recency rank = "+total_recency_rank);
        System.out.println ("previously changed clones experienced bugs = "+total_freq);
        System.out.println ("average frequency rank = "+(float)total_frequency_rank/previouslychanged_clones_count_bugfix);
        System.out.println ("average recency rank = "+(float)total_recency_rank/previouslychanged_clones_count_bugfix);
        System.out.println ("both equal = "+both_equal+ ", frequency better = "+frequency_better + ", recency better = "+recency_better);
        
        float avg1 = (float)total_distance_bugfix/count_previously_not_changed_bugfix;
        float avg2 = (float)total_distance_notbugfix/count_previously_not_changed_notbugfix;
        
        System.out.println ("\n\ncount_previously_not_changed_bugfix = "+count_previously_not_changed_bugfix+", total_distance_bugfix = "+total_distance_bugfix);
        System.out.println ("count_previously_not_changed_notbugfix = "+count_previously_not_changed_notbugfix+", total_distance_notbugfix = "+total_distance_notbugfix);
        System.out.println ("Previously not changed clones bug-fix average distance = "+avg1);
        System.out.println ("Previously not changed clones not bug-fix average distance = "+avg2);
    }
    
    
    public int wasChangedPreviously (int gcid, int revision, int clonetype)
    {
        try
        {
            String cc = "";
            da.connect();
            da.executeQuery("select sum(changecount) cc from type"+clonetype+"clones where globalcloneid = "+gcid +" and revision < "+revision);
            while (da.result.next())
            {
                cc = da.result.getString ("cc");
            }
            da.disconnect();
            int changecount = Integer.parseInt(cc);
            //System.out.println ("change count = "+cc);
            return changecount;
        }
        catch (Exception e)
        {
            //System.out.println ("change count = 0.");
            return 0;
        }
    }            

    
    public String commaSeparate (String str)
    {
        String r = "";
        int l = str.trim().split("[ ]+").length;
        for (int i =0;i<l-1;i++)
        {
            r += str.trim().split("[ ]+")[i].trim()+", ";
        }
        r += str.trim().split("[ ]+")[l-1].trim()+" ";
        return r;
    }
    
    public int distanceOfPreviouslyNotChangedClones (String clones, int revision, int clonetype)
    {
        int total_distance = 0;
        
        try
        {
            da.connect ();
            //String query = "select min(revision) v1, globalcloneid from type1clones where globalcloneid in ("+ commaSeparate(clones) +") and revision < "+revision+" group by globalcloneid";            
            //System.out.println (query);
            da.executeQuery ("select min(revision) v1, globalcloneid from type1clones where globalcloneid in ("+ commaSeparate(clones) +") and revision < "+revision+" group by globalcloneid");
            while (da.result.next ())
            {
                int v1 = Integer.parseInt(da.result.getString ("v1"));
                int dist = revision - v1;
                total_distance += dist;                
            }
            da.disconnect ();
        }
        catch (Exception e)
        {            
        }                
        
        return total_distance;
    }
    
    public String getFrequencyBasedSorting (String clones, int revision, int clonetype)
    {
        String allclones = "", allfrequencies = "";
        String frequencies = "";
        int l = clones.trim().split("[ ]+").length;
        //for (int i =0;i<l;i++)
        //{
        //get change frequency before revision.
        try
        {
            da.connect ();
            //String query = "select sum(changecount) cc, globalcloneid from type"+clonetype+"clones where globalcloneid in ("+commaSeparate(clones)+") and revision < "+revision + " group by globalcloneid";
            //System.out.println (query);
            da.executeQuery("select sum(changecount) cc, globalcloneid from type"+clonetype+"clones where globalcloneid in ("+commaSeparate(clones)+") and globalcloneid <> -1 and revision < "+revision + " group by globalcloneid order by cc desc");                
            while(da.result.next())
            {
                int freq = Integer.parseInt(da.result.getString("cc"));
                int gcid = Integer.parseInt(da.result.getString("globalcloneid"));
                allclones += " " + gcid + " ";
                allfrequencies += " " + freq + " ";
            }
            da.disconnect ();                
        }
        catch (Exception e)
        {
        }
        //}
        
        //String sorted = sortClones(allclones, allfrequencies);
        return allclones;
    }  
    
    public String getRecencyBasedSorting (String clones, int revision, int clonetype)
    {
        String allclones = "", allrecencies = "";
        String recencies = "";
        int l = clones.trim().split("[ ]+").length;
        //for (int i =0;i<l;i++)
        //{
        //get change frequency before revision.
        try
        {
            da.connect ();
            da.executeQuery("select max(revision) mr, globalcloneid from type"+clonetype+"clones where globalcloneid in ("+commaSeparate(clones)+") and globalcloneid <> -1 and changecount > 0 and revision < "+revision + " group by globalcloneid order by mr desc");                
            while(da.result.next())
            {
                int rec = Integer.parseInt(da.result.getString("mr"));
                int gcid = Integer.parseInt(da.result.getString("globalcloneid"));
                allclones += " " + gcid + " ";
                allrecencies += " " + rec + " ";
            }
            da.disconnect ();                
        }
        catch (Exception e)
        {
        }
        //}
        
        //String sorted = sortClones(allclones, allrecencies);
        return allclones;
    }
    
    public String getChangeFrequencyOfClones (String clones, int revision, int clonetype)
    {
        String frequencies = "";
        int l = clones.trim().split("[ ]+").length;
        for (int i =0;i<l;i++)
        {
            String clone = clones.trim().split("[ ]+")[i].trim();
            int cc = 0;
            
            //get change frequency before revision.
            try
            {
                da.connect ();
                da.executeQuery("select sum(changecount) cc from type"+clonetype+"clones where globalcloneid = "+clone+" and revision < "+revision);                
                while(da.result.next())
                {
                    cc = Integer.parseInt(da.result.getString("cc"));
                }
                da.disconnect ();
                
            }
            catch (Exception e)
            {
                cc = 0;
            }
            frequencies += " " + cc + " ";
        }
        return frequencies;
    }

    public String getChangeRecencyOfClones (String clones, int revision, int clonetype)
    {
        String recencies = "";
        int l = clones.trim().split("[ ]+").length;
        for (int i =0;i<l;i++)
        {
            String clone = clones.trim().split("[ ]+")[i].trim();
            int rc = 0;
            
            //get change frequency before revision.
            try
            {
                da.connect ();
                da.executeQuery("select max(revision) cc from type"+clonetype+"clones where globalcloneid = "+clone+" and changecount > 0 and revision < "+revision);                
                while(da.result.next())
                {
                    rc = Integer.parseInt(da.result.getString("cc"));
                }
                da.disconnect ();
                
            }
            catch (Exception e)
            {
                rc = 0;
            }
            recencies += " " + rc + " ";
        }
        return recencies;
    }
    
    public String sortClones(String clones, String values)
    {
        int [] iclones = new int[10000];
        int [] ivalues = new int[10000];
        int icount = 0;
        
        int l = clones.trim().split("[ ]+").length;
        for (int i =0;i<l;i++)
        {
            iclones[i] = Integer.parseInt(clones.trim().split("[ ]+")[i].trim());
            ivalues[i] = Integer.parseInt(values.trim().split("[ ]+")[i].trim());
        }
        
        //selection sort by values.
        for (int i=0;i<l-1;i++)
        {
            int big = i;
            for (int j=i+1;j<l;j++)
            {
                if (ivalues[big] < ivalues[j]){ big = j; }
            }
            int t = ivalues[i];
            ivalues[i] = ivalues[big];
            ivalues[big] = t;
            
            t = iclones[i];
            iclones[i] = iclones[big];
            iclones[big] = t;
        }
        
        String rclones = "";
        
        for (int i =0;i<l;i++)
        {
            rclones += " "+iclones[i]+" ";
        }
        
        return rclones;
    }
    
    
    public String[] getPreviouslyChangedClones (int revision, int clonetype)
    {
        String gcids = "";
        String gcid = "";
        String gcidschanged = "";
        String gcidsnotchanged = "";
        try
        {
            //getting all cloneids in revision.
            da.connect ();
            da.executeQuery("select globalcloneid from type"+clonetype+"clones where revision = "+revision);
            while (da.result.next())
            {
                gcid = da.result.getString("globalcloneid");
                gcids += " " + gcid + " ";
            }
            da.disconnect ();
            
            
            //getting all cloneids in revision and changed in previous commits.
            da.connect ();
            da.executeQuery ("select distinct(globalcloneid) from type"+clonetype+"clones where changecount > 0 and revision < "+revision+" and globalcloneid in (select distinct globalcloneid from type"+clonetype+"clones where revision = "+revision+")");
            while (da.result.next ())
            {
                gcid = da.result.getString ("globalcloneid");
                gcidschanged += " " + gcid + " ";
            }
            da.disconnect ();
            
            
            gcids = gcids.trim();
            int l = gcids.split("[ ]+").length;
            for (int i =0;i<l;i++)
            {
                int aclone = Integer.parseInt(gcids.split("[ ]+")[i].trim());
                if (!gcidschanged.contains(" "+aclone+" "))
                {
                    gcidsnotchanged += " " + aclone + " ";
                }
            }            
        }
        catch (Exception e)
        {
            
        }
        
        String [] results = new String[2];
        results[0] = gcidschanged;
        results[1] = gcidsnotchanged;
        
        return results;
    }
    
    public String getNotPreviouslyChangedClones (int revision, int clonetype)
    {
        return "";
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPrediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPrediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPrediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvestigatingBugPrediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvestigatingBugPrediction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
