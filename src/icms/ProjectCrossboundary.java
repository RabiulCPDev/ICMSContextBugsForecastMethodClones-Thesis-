/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package icms;
import java.io.*;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mani
 */
public class ProjectCrossboundary extends javax.swing.JFrame {

    /**
     * Creates new form ProjectCrossboundary
     */
    
    CommonParameters cp = new CommonParameters ();
    AttributeNames an = new AttributeNames ();
    CloneDetection cd = new CloneDetection ();
    MethodExtraction me = new MethodExtraction ();
    OriginAnalysis oa = new OriginAnalysis ();
    OriginAnalysisForClones oafc = new OriginAnalysisForClones ();
    UpdateChanges uc = new UpdateChanges ();
    
    SPCPClones spcp = new SPCPClones ();
    
    public ProjectCrossboundary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton23.setText("View Pairs");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton24.setText("Find Eligible SPCP Pairs");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 153, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SPCP Miner (Mining Important Clones for Refactoring)");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Detect and Store Methods");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Extract and Store Type 1 Clones");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton12.setText("Extract and Store Type 2 Clones");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Extract and Store Type 3 Clones");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Extract and Store Mixed Types Clones");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Preliminary Steps");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Detection of SPCP Clones");

        jButton15.setText("Get Type 1 SPCP Clones");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton25.setText("Get Type 2 SPCP Clones");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton26.setText("Get Type 3 SPCP Clones");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setText("Get Mixed Type SPCP Clones");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton12)
                .addGap(18, 18, 18)
                .addComponent(jButton13)
                .addGap(18, 18, 18)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jButton15)
                .addGap(18, 18, 18)
                .addComponent(jButton25)
                .addGap(18, 18, 18)
                .addComponent(jButton26)
                .addGap(18, 18, 18)
                .addComponent(jButton27)
                .addGap(25, 25, 25))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("All SPCP Clones in the System");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Group", "Clone ID", "File", "Start Line", "End Line"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Non-Cross-Boundary SPCP Clones in the System");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Cross-Boundary SPCP Clones in the System");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel5.setText("Repository of the Subject System");

        jTextField1.setText("jTextField1");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel6.setText("Choose Programming Language");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel7.setText("Starting Revision");

        jTextField2.setText("jTextField2");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel8.setText("Ending Revision");

        jTextField3.setText("jTextField3");

        jButton2.setText("Save System Information");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C", "Java", "C#", "Python" }));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 914, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1232, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1133, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1133, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 188, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
                            .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(133, 133, 133))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(jButton23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton24)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    public void getEffectiveCrossBoundarySPCPPairs (int cloneType)
    {
        try
        {
            String lastrevisionclones = getClonesInRevision (cp.revisionCount, cloneType);
            String changedclones = getChangedClones (cloneType);
            
            String [] spcps = new String [100000];
            int spcpcount = 0;
            String [] dcps = new String [100000];
            int dcpcount = 0;
            String [] cnps = new String [100000];
            int cnpcount = 0;
            
            
            //reading the spcp clones.            
            String spcpclones = "";            
            BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system + "/results_crossboundary/pairs_spcp_type"+cloneType+".txt")));
            String str = "";            
            while ((str = br.readLine())!= null)
            {
                if (str.trim().length() == 0) {continue;}

                int gcid1 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid1"));
                int gcid2 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid2"));
                
                if (lastrevisionclones.contains (" " + gcid1 + " ") && lastrevisionclones.contains (" " + gcid2 + " "))
                {
                    spcps[spcpcount] = str;
                    spcpcount++;
                }
                
                if (!spcpclones.contains (" " + gcid1 + " "))
                {
                    if (lastrevisionclones.contains (" " + gcid1 + " "))
                    {
                        if (changedclones.contains (" "+gcid1+" "))
                        {
                            spcpclones = spcpclones + " " + gcid1 + " ";
                        }
                    }
                }
                if (!spcpclones.contains (" " + gcid2 + " "))
                {
                    if (lastrevisionclones.contains (" " + gcid2 + " "))
                    {
                        if (changedclones.contains (" "+gcid2+" "))
                        {
                            spcpclones = spcpclones + " " + gcid2 + " ";
                        }
                    }
                }                                
            }            
            br.close();
            
            
            //reading the dcpclones            
            String dcpclones = "";
            BufferedReader br2 = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system + "/results_crossboundary/pairs_differentclass_type"+cloneType+".txt")));
            while ((str = br2.readLine())!= null)
            {
                if (str.trim().length() == 0) {continue;}
                                
                int gcid1 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid1"));
                int gcid2 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid2"));
                
                if (!lastrevisionclones.contains (" " + gcid1 + " ") || !lastrevisionclones.contains (" " + gcid2 + " "))
                {
                    continue;
                }                                
                
                float confidence = Float.parseFloat (cp.getAttributeValueFromString(str, "confidence"));                
                if (confidence < 1) {continue;}
                
                int support = Integer.parseInt(cp.getAttributeValueFromString(str, "support"));
                if (support < 2 ) {continue;}                                   
                                
                dcps[dcpcount] = str;
                dcpcount++;   
                
                if (!dcpclones.contains (" " + gcid1 + " "))
                {
                    dcpclones = dcpclones + " " + gcid1 + " ";
                }
                if (!dcpclones.contains (" " + gcid2 + " "))
                {
                    dcpclones = dcpclones + " " + gcid2 + " ";
                }                                
            }            
            br2.close();
            
            
            //reading the clones from the clone non-clone pairs.            
            String cnpclones = "";
            BufferedReader br3 = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system + "/results_crossboundary/pairs_clonenonclone_type"+cloneType+".txt")));
            while ((str = br3.readLine())!= null)
            {
                if (str.trim().length() == 0) {continue;}
                
                                                
                int gcid = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid"));
                int gmid = Integer.parseInt(cp.getAttributeValueFromString(str, "gmid"));
                
                
                if (!lastrevisionclones.contains (" " + gcid + " ") || !lastrevisionclones.contains (" " + gmid + " "))
                {
                    continue;
                }                                
                
                float confidence = Float.parseFloat (cp.getAttributeValueFromString(str, "confidence"));
                if (confidence < 1) {continue;}   
                
                int support = Integer.parseInt(cp.getAttributeValueFromString(str, "support"));
                if (support < 2 ) {continue;}                
                                 
                cnps[cnpcount] = str;
                cnpcount++;    
                
                if (!cnpclones.contains (" " + gcid + " "))
                {
                    cnpclones = cnpclones + " " + gcid + " ";
                }                
            }            
            br3.close();
            
            //get all clones from the last revision.
            
            
            
            
            //spcp clones with cross boundary connections.
            String crossboundary = "";            
            spcpclones = spcpclones.trim();
            int l = spcpclones.split("[ ]+").length;
            
            for (int i=0;i<l;i++)
            {
                String spcpclone = spcpclones.split("[ ]+")[i].trim();
                
                if (dcpclones.contains (" " + spcpclone + " ") || cnpclones.contains (" " + spcpclone + " "))
                {
                    if (!crossboundary.contains(" "+spcpclone+" "))
                    {
                        crossboundary = crossboundary + " " + spcpclone + " ";
                    }
                }
            }
            
            //spcp clones without cross boundary connections.
            String noncrossboundary = "";
            for (int i =0;i<l;i++)
            {
                String spcpclone = spcpclones.split("[ ]+")[i].trim();
                if (!crossboundary.contains (" "+spcpclone+" "))
                {
                    if (!noncrossboundary.contains (" "+spcpclone+" "))
                    {
                        noncrossboundary = noncrossboundary + " " + spcpclone + " ";
                    }
                }
            }
                                    
            System.out.println ("\n\neffective cross-boundary spcp pairs\n\n");
            
            for (int i =0;i<spcpcount;i++)
            {
                int spcp1 = Integer.parseInt(cp.getAttributeValueFromString(spcps[i], "gcid1"));
                int spcp2 = Integer.parseInt(cp.getAttributeValueFromString(spcps[i], "gcid2"));
                
                String dcplinks1 = "";
                String dcplinks2 = "";
                String cnplinks1 = "";
                String cnplinks2 = "";
                
                if (!crossboundary.contains (" "+spcp1+" ") && !crossboundary.contains (" "+spcp2+" "))
                {
                    continue;
                }
                
                
                dcplinks1 = getDCPLinks(dcps, dcpcount, spcp1);
                dcplinks2 = getDCPLinks(dcps, dcpcount, spcp2);
                
                cnplinks1 = getCNPLinks (cnps, cnpcount, spcp1);
                cnplinks2 = getCNPLinks (cnps, cnpcount, spcp2);
                
                if (!dcplinks1.equals (dcplinks2))
                {
                    System.out.println ("spcp1: "+spcp1+" dcplinks: "+dcplinks1);
                    System.out.println ("spcp2: "+spcp2+" dcplinks: "+dcplinks2);
                }
                
                if (!cnplinks1.equals(cnplinks2))
                {
                    System.out.println ("spcp1: "+spcp1+" cnplinks: "+cnplinks1);
                    System.out.println ("spcp2: "+spcp2+" cnplinks: "+cnplinks2);                    
                }
            }
        }
        catch (Exception e)
        {
            System.out.println ("error in method = jButton17ActionPerformed. "+e);
        }                
    }
    
    public String getDCPLinks (String [] dcps, int dcpcount, int clone)
    {
        String dcplinks = "";
        
        //getting dcp relations.
        for (int j=0;j<dcpcount;j++)
        {
            int gcid1 = Integer.parseInt (cp.getAttributeValueFromString(dcps[j], "gcid1"));
            int gcid2 = Integer.parseInt (cp.getAttributeValueFromString(dcps[j], "gcid2"));

            if (clone == gcid1)
            {
                if (!dcplinks.contains(" "+gcid2+" "))
                {
                    dcplinks = dcplinks + " " + gcid2 + " ";
                }
            }

            if (clone == gcid2)
            {
                if (!dcplinks.contains(" "+gcid1+" "))
                {
                    dcplinks = dcplinks + " " + gcid1 + " ";
                }
            }                    
        }        
        
        return dcplinks;
    }
    
    public String getCNPLinks (String [] cnps, int cnpcount, int clone)
    {
        String cnplinks = "";
        
        //getting cnp relations.
        for (int j=0;j<cnpcount;j++)
        {
            int gcid = Integer.parseInt (cp.getAttributeValueFromString(cnps[j], "gcid"));
            int gmid = Integer.parseInt (cp.getAttributeValueFromString(cnps[j], "gmid"));

            if (clone == gcid)
            {
                if (!cnplinks.contains(" "+gmid+" "))
                {
                    cnplinks = cnplinks + " " + gmid + " ";
                }
            }
        }        
        return cnplinks;
    }
    
    public void getCrossBoundarySPCPClones (int cloneType)
    {
        try
        {
            String lastrevisionclones = getClonesInRevision (cp.revisionCount, cloneType);
            String changedclones = getChangedClones (cloneType);
            
            
            String [] spcps = new String [100000];
            int spcpcount = 0;
            String [] dcps = new String [100000];
            int dcpcount = 0;
            String [] cnps = new String [100000];
            int cnpcount = 0;
            
            
            //reading the spcp clones.            
            String spcpclones = "";            
            BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system + "/results_crossboundary/pairs_spcp_type"+cloneType+".txt")));
            String str = "";            
            while ((str = br.readLine())!= null)
            {
                if (str.trim().length() == 0) {continue;}
                int gcid1 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid1"));
                int gcid2 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid2"));
                int support = Integer.parseInt(cp.getAttributeValueFromString(str, "support"));
                float confidence = Float.parseFloat (cp.getAttributeValueFromString(str, "confidence"));
                
                if(!lastrevisionclones.contains (" " + gcid1 + " ") || !lastrevisionclones.contains (" " + gcid2 + " "))
                {
                    continue;
                }
                if (!changedclones.contains (" "+gcid1+" ") || !changedclones.contains (" "+gcid2+" "))
                {
                    continue;
                }
                //if (support < 1) {continue;}
                spcps[spcpcount] = " " + gcid1 + " " + gcid2 + " ";
                spcpcount++;
                
                if (!spcpclones.contains (" " + gcid1 + " "))
                {
                    if (lastrevisionclones.contains (" " + gcid1 + " "))
                    {
                        if (changedclones.contains (" "+gcid1+" "))
                        {
                            spcpclones = spcpclones + " " + gcid1 + " ";
                        }
                    }
                }
                if (!spcpclones.contains (" " + gcid2 + " "))
                {
                    if (lastrevisionclones.contains (" " + gcid2 + " "))
                    {
                        if (changedclones.contains (" "+gcid2+" "))
                        {
                            spcpclones = spcpclones + " " + gcid2 + " ";
                        }
                    }
                }                
            }            
            br.close();
            
            
            
            //getting spcp groups.
            String [] groups = new String [100000];
            int groupcount = 0;
            
            
            for (int i =0;i<spcpcount;i++)
            {
                if (spcps[i].trim().length() == 0) {continue;}
                
                for (int m=i+1;m<spcpcount;m++)
                {                        
                    String pstring = spcps[i];
                    
                    for (int j=i+1;j<spcpcount;j++)
                    {
                        if (spcps[j].trim().length() == 0){continue;}
                        int length = spcps[j].trim().split("[ ]+").length;
                        int got = 0;
                        for (int k =0;k<length;k++)
                        {                            
                            String c = spcps[j].trim().split("[ ]+")[k].trim();
                            if (spcps[i].contains (" " + c +" "))
                            {
                                got = 1;
                                break;
                            }
                        }

                        if (got == 1)
                        {
                            for (int k =0;k<length;k++)
                            {                            
                                String c = spcps[j].trim().split("[ ]+")[k].trim();
                                if (!spcps[i].contains (" " + c +" "))
                                {
                                    spcps[i] += " " + c + " ";
                                }
                            } 
                            spcps[j] = "";
                        }
                    }
                    String nstring = spcps[i];
                    if (pstring.equals (nstring))
                    {
                        break;
                    }
                }

                groups[groupcount] = spcps[i];
                groupcount++;
            }
            
            
            //showing the groups in the table.
            
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setRowCount(0);
            
            BufferedWriter writer4 = new BufferedWriter (new FileWriter ("SPCPClones.xml"));
            writer4.write ("<spcp_groups>");
            
            for (int i =0;i<groupcount;i++)
            {
                
                writer4.write("<group id='"+(i+1)+"'>");
                int clonecount = groups[i].trim().split("[ ]+").length;
                for (int j=0;j<clonecount;j++)
                {
                    Object [] row = new Object[5];
                    row[0] = "";
                    if (j == 0)
                    {
                        row[0] = i+1;
                    }                    
                    
                    int clone = Integer.parseInt(groups[i].trim().split("[ ]+")[j].trim());
                    String file = cp.getCloneFile(clone, cp.revisionCount, cloneType);
                    int sline = cp.getCloneStartingLine(clone, cp.revisionCount, cloneType);
                    int eline = cp.getCloneEndingLine(clone, cp.revisionCount, cloneType);
                    
                    row[1] = clone;
                    row[2] = file;
                    row[3] = sline;
                    row[4] = eline;
                    model.addRow(row);
                    
                    writer4.write ("<clone id='"+clone+"' file='"+file+"' startline = '"+sline+"' endline='"+eline+"' />");
                }
                writer4.write("</group>");
            }
            writer4.write ("</spcp_groups>");
            writer4.close();
            
            
            
            
            //reading the dcpclones            
            String dcpclones = "";
            BufferedReader br2 = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system + "/results_crossboundary/pairs_differentclass_type"+cloneType+".txt")));
            while ((str = br2.readLine())!= null)
            {
                if (str.trim().length() == 0) {continue;}
                                
                int gcid1 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid1"));
                int gcid2 = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid2"));
                
                if (!lastrevisionclones.contains (" " + gcid1 + " ") || !lastrevisionclones.contains (" " + gcid2 + " "))
                {
                    continue;
                }                                
                
                float confidence = Float.parseFloat (cp.getAttributeValueFromString(str, "confidence"));                
                if (confidence < 1) {continue;}
                
                int support = Integer.parseInt(cp.getAttributeValueFromString(str, "support"));
                if (support < 2 ) {continue;}                
                                
                dcps[dcpcount] = str;
                dcpcount++;                
                                               
                if (!dcpclones.contains (" " + gcid1 + " "))
                {
                    dcpclones = dcpclones + " " + gcid1 + " ";
                }
                if (!dcpclones.contains (" " + gcid2 + " "))
                {
                    dcpclones = dcpclones + " " + gcid2 + " ";
                }                
                if (spcpclones.contains (" " + gcid1 + " "))
                {
                    System.out.println ("dcp: (spcp = "+gcid1+") ----> "+str);
                }
                if (spcpclones.contains (" " + gcid2 + " "))
                {
                    System.out.println ("dcp: (spcp = "+gcid2+") ----> "+str);
                }
            }            
            br2.close();
            
            
            //reading the clones from the clone non-clone pairs.            
            String cnpclones = "";
            BufferedReader br3 = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system + "/results_crossboundary/pairs_clonenonclone_type"+cloneType+".txt")));
            while ((str = br3.readLine())!= null)
            {
                if (str.trim().length() == 0) {continue;}
                
                                                
                int gcid = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid"));
                int gmid = Integer.parseInt(cp.getAttributeValueFromString(str, "gmid"));
                
                
                if (!lastrevisionclones.contains (" " + gcid + " ") || !lastrevisionclones.contains (" " + gmid + " "))
                {
                    continue;
                }                                
                
                float confidence = Float.parseFloat (cp.getAttributeValueFromString(str, "confidence"));
                if (confidence < 1) {continue;}   
                
                int support = Integer.parseInt(cp.getAttributeValueFromString(str, "support"));
                if (support < 2 ) {continue;}                
                                 
                cnps[cnpcount] = str;
                cnpcount++;                                                                
                
                if (!cnpclones.contains (" " + gcid + " "))
                {
                    cnpclones = cnpclones + " " + gcid + " ";
                }
                
                if (spcpclones.contains (" " + gcid + " "))
                {
                    System.out.println ("cnp: (spcp = "+gcid+") ----> "+str);
                }
            }            
            br3.close();
            
            //get all clones from the last revision.
            
            
            
            
            //spcp clones with cross boundary connections.
            String crossboundary = "";            
            spcpclones = spcpclones.trim();
            int l = spcpclones.split("[ ]+").length;
            
            for (int i=0;i<l;i++)
            {
                String spcpclone = spcpclones.split("[ ]+")[i].trim();
                
                if (dcpclones.contains (" " + spcpclone + " ") || cnpclones.contains (" " + spcpclone + " "))
                {
                    if (!crossboundary.contains(" "+spcpclone+" "))
                    {
                        crossboundary = crossboundary + " " + spcpclone + " ";
                    }
                }
            }
            
            //spcp clones without cross boundary connections.
            String noncrossboundary = "";
            for (int i =0;i<l;i++)
            {
                String spcpclone = spcpclones.split("[ ]+")[i].trim();
                if (!crossboundary.contains (" "+spcpclone+" "))
                {
                    if (!noncrossboundary.contains (" "+spcpclone+" "))
                    {
                        noncrossboundary = noncrossboundary + " " + spcpclone + " ";
                    }
                }
            }
            
            
            //getting non-cross-boundary spcp groups.
            String [] groups2 = new String [100000];
            int groupcount2 = 0;
            for (int i =0;i<groupcount;i++)
            {
                int length = groups[i].trim().split("[ ]+").length;
                int ecount = 0;
                groups2[groupcount2] = "";
                for (int j=0;j<length;j++)
                {
                    String element = groups[i].trim().split("[ ]+")[j].trim();
                    if (noncrossboundary.contains (" "+element+" "))
                    {
                        ecount++;
                        groups2[groupcount2] += " " + element+" ";
                    }
                }
                if (ecount > 1)
                {
                    groupcount2++;
                }
            }
            
            //printing non-cross-boundary SPCP groups.
                
            try
            {
                BufferedWriter writer = new BufferedWriter (new FileWriter (cp.subject_system+"/spcpclones-non-cross-boundary.xml"));

                writer.write ("<non-cross-boundary-group>");
                for (int i =0;i<groupcount2;i++)
                {
                    writer.write("<group id='"+(i+1)+"'>");
                    int clonecount = groups2[i].trim().split("[ ]+").length;
                    for (int j=0;j<clonecount;j++)
                    {
                        int clone = Integer.parseInt(groups2[i].trim().split("[ ]+")[j].trim());
                        String file = cp.getCloneFile(clone, cp.revisionCount, cloneType);
                        int sline = cp.getCloneStartingLine(clone, cp.revisionCount, cloneType);
                        int eline = cp.getCloneEndingLine(clone, cp.revisionCount, cloneType);
                        writer.write ("<clone id='"+clone+"' file='"+file+"' startline = '"+sline+"' endline='"+eline+"' />");
                    }
                    writer.write("</group>");
                    System.out.println ("non-cross-boundary-group: "+groups2[i]);
                }
                writer.write ("</non-cross-boundary-group>");
                
                writer.close ();
            }
            catch (Exception e)
            {

            }
            
                        
            
            int clones = lastrevisionclones.trim().split("[ ]+").length;
            int sclones = spcpclones.trim().split("[ ]+").length;
            
            System.out.println ("\n\ntotal count of spcp clones = "+spcpclones.trim().split("[ ]+").length);
            System.out.println ("percentage of spcp clones = "+(float)sclones*100/clones);
            
            System.out.println ("\ntotal count of cross-boundary spcp clones = "+crossboundary.trim().split("[ ]+").length);
            System.out.println ("change-proneness of cross-boundary spcp clones = "+getChangeproneness (crossboundary, cloneType));
            
            System.out.println ("\ntotal count of non-crossboundary-spcp clones = "+noncrossboundary.trim().split("[ ]+").length);            
            System.out.println ("change-proneness of non-cross-boundary spcp clones = "+getChangeproneness (noncrossboundary, cloneType));
            
            
            
            int cblength = crossboundary.trim().split("[ ]+").length;
            int dcplinkcount = 0;
            int cnplinkcount = 0;
            
            
            int [] cb = new int [100000];
            int [] cbcount =  new int [100000];
            int cbnum = cblength;
            for (int i =0;i<cblength;i++)
            {
                int clone = Integer.parseInt(crossboundary.trim().split("[ ]+")[i].trim());
                cb[i] = clone;
                
                String dcplinks = "";
                String cnplinks = "";
                
                for (int j=0;j<dcpcount;j++)
                {
                    int gcid1 = Integer.parseInt (cp.getAttributeValueFromString(dcps[j], "gcid1"));
                    int gcid2 = Integer.parseInt (cp.getAttributeValueFromString(dcps[j], "gcid2"));
                    
                    if (clone == gcid1)
                    {
                        if (!dcplinks.contains(" "+gcid2+" ") && lastrevisionclones.contains (" " + gcid2 + " "))
                        {
                            dcplinks = dcplinks + " " + gcid2 + " ";
                        }
                    }
                    
                    if (clone == gcid2)
                    {
                        if (!dcplinks.contains(" "+gcid1+" ") && lastrevisionclones.contains (" " + gcid1 + " "))
                        {
                            dcplinks = dcplinks + " " + gcid1 + " ";
                        }
                    }                    
                }
                
                //getting cnp relations.
                for (int j=0;j<cnpcount;j++)
                {
                    int gcid = Integer.parseInt (cp.getAttributeValueFromString(cnps[j], "gcid"));
                    int gmid = Integer.parseInt (cp.getAttributeValueFromString(cnps[j], "gmid"));
                    
                    if (clone == gcid)
                    {
                        if (!cnplinks.contains(" "+gmid+" ") && lastrevisionclones.contains (" " + gmid + " ") )
                        {
                            cnplinks = cnplinks + " " + gmid + " ";
                        }
                    }
                }
                
                int num = 0;
                
                if (dcplinks.trim().length() > 0)
                {
                    num += dcplinks.trim().split("[ ]+").length;
                }
                
                if (cnplinks.trim().length() > 0)
                {
                    num += cnplinks.trim().split("[ ]+").length;
                }
                
                cbcount[i] = num;                
            }
            
            
            for (int i =0;i<cbnum-1;i++)
            {
                int highest = i;
                for (int j=i+1;j<cbnum;j++)
                {
                    if (cbcount[j] > cbcount[highest])
                    {
                        highest = j;
                    }
                }
                int t1 = cbcount[i];
                int t2 = cb[i];
                
                cbcount[i] = cbcount[highest];
                cb[i] = cb[highest];
                
                cbcount[highest] = t1;
                cb[highest] = t2;
            }
            
            
            
            
            
            BufferedWriter writer2 = new BufferedWriter (new FileWriter (cp.subject_system+"/spcpclones-cross-boundary.xml"));
            writer2.write ("<cross-boundary-clones>");
            for (int i =0;i<cblength;i++)
            {
                //int clone = Integer.parseInt(crossboundary.trim().split("[ ]+")[i].trim());
                int clone = cb[i];
                String dcplinks = "";
                String cnplinks = "";
                
                String file = cp.getCloneFile(clone, cp.revisionCount, cloneType);
                int sline = cp.getCloneStartingLine(clone, cp.revisionCount, cloneType);
                int eline = cp.getCloneEndingLine(clone, cp.revisionCount, cloneType);                
                writer2.write ("<cross-boundary-clone file='"+file+"' startline='"+sline+"' endline='"+eline+"' couplings='"+cbcount[i]+"'>");
                
                writer2.write ("<different-class-relations>");
                //getting dcp relations.
                for (int j=0;j<dcpcount;j++)
                {
                    int gcid1 = Integer.parseInt (cp.getAttributeValueFromString(dcps[j], "gcid1"));
                    int gcid2 = Integer.parseInt (cp.getAttributeValueFromString(dcps[j], "gcid2"));
                    
                    if (clone == gcid1)
                    {
                        if (!dcplinks.contains(" "+gcid2+" ") && lastrevisionclones.contains (" " + gcid2 + " "))
                        {
                            dcplinks = dcplinks + " " + gcid2 + " ";
                            int clone2 = gcid2;
                            String file2 = cp.getCloneFile(clone2, cp.revisionCount, cloneType);
                            int sline2 = cp.getCloneStartingLine(clone2, cp.revisionCount, cloneType);
                            int eline2 = cp.getCloneEndingLine(clone2, cp.revisionCount, cloneType);   
                            writer2.write ("<clone id='"+clone2+"' file='"+file2+"' startline = '"+sline2+"' endline='"+eline2+"' />");
                        }
                    }
                    
                    if (clone == gcid2)
                    {
                        if (!dcplinks.contains(" "+gcid1+" ") && lastrevisionclones.contains (" " + gcid1 + " "))
                        {
                            dcplinks = dcplinks + " " + gcid1 + " ";
                            int clone2 = gcid1;
                            String file2 = cp.getCloneFile(clone2, cp.revisionCount, cloneType);
                            int sline2 = cp.getCloneStartingLine(clone2, cp.revisionCount, cloneType);
                            int eline2 = cp.getCloneEndingLine(clone2, cp.revisionCount, cloneType);   
                            writer2.write ("<clone id='"+clone2+"' file='"+file2+"' startline = '"+sline2+"' endline='"+eline2+"' />");
                            
                        }
                    }                    
                }
                writer2.write ("</different-class-relations>");
                
                writer2.write ("<non-clone-relations>");
                //getting cnp relations.
                for (int j=0;j<cnpcount;j++)
                {
                    int gcid = Integer.parseInt (cp.getAttributeValueFromString(cnps[j], "gcid"));
                    int gmid = Integer.parseInt (cp.getAttributeValueFromString(cnps[j], "gmid"));
                    
                    if (clone == gcid)
                    {
                        if (!cnplinks.contains(" "+gmid+" ") && lastrevisionclones.contains (" " + gmid + " ") )
                        {
                            cnplinks = cnplinks + " " + gmid + " ";
                            
                            String file2 = cp.getMethodFile(gmid, cp.revisionCount);
                            int sline2 = cp.getMethodStartingLine(gmid, cp.revisionCount);
                            int eline2 = cp.getMethodEndingLine(gmid, cp.revisionCount);   
                            writer2.write ("<method id='"+gmid+"' file='"+file2+"' startline = '"+sline2+"' endline='"+eline2+"' />");
                            
                        }
                    }
                }
                writer2.write ("</non-clone-relations>");
                
                writer2.write ("</cross-boundary-clone>");
                
                dcplinkcount += dcplinks.trim().split("[ ]+").length;
                cnplinkcount += cnplinks.trim().split("[ ]+").length;                
            }
            writer2.write ("</cross-boundary-clones>");
            writer2.close();
            
            System.out.println ("average dcp connections = "+(float)dcplinkcount/cblength);
            System.out.println ("average cnp connections = "+(float)cnplinkcount/cblength);
            
            
            
            /*int l1 = crossboundary.trim().split("[ ]+").length;
            int mclone = 0;
            int bclone = 0;
            int notpresent = 0;
            for (int i =0;i<l1;i++)
            {
                int clone = Integer.parseInt(crossboundary.trim().split("[ ]+")[i].trim());
                int ismclone = isMethodClone (clone, cloneType);
                if (ismclone == 1)
                {
                    mclone++;
                }
                else
                {
                    if (ismclone == 0)
                    {
                        bclone++;
                    }
                    else
                    {
                        notpresent++;
                    }
                }                
                
                //System.out.println ("mclone = "+mclone+" bclone = "+bclone+" not present = "+notpresent);
            }
            
            System.out.println ("\nstatistics on cross-boundary spcp clones.");
            System.out.println ("\tpresent = "+(mclone+bclone));
            System.out.println ("\tmethod clones = "+mclone);
            System.out.println ("\tblock clones = "+bclone);
            System.out.println ("\tnot present = "+notpresent);
            
            
            int l2 = noncrossboundary.trim().split("[ ]+").length;
            mclone = 0;
            bclone = 0;
            notpresent = 0;
            for (int i =0;i<l2;i++)
            {
                int clone = Integer.parseInt(noncrossboundary.trim().split("[ ]+")[i].trim());
                int ismclone = isMethodClone (clone, cloneType);
                if (ismclone == 1)
                {
                    mclone++;
                }
                else
                {
                    if (ismclone == 0)
                    {
                        bclone++;
                    }
                    else
                    {
                        notpresent++;
                    }
                }  
                //System.out.println ("mclone = "+mclone+" bclone = "+bclone+" not present = "+notpresent);
            }       
            System.out.println ("\nstatistics on non-cross-boundary spcp clones.");
            System.out.println ("\tpresent = "+(mclone+bclone));
            System.out.println ("\tmethod clones = "+mclone);
            System.out.println ("\tblock clones = "+bclone);
            System.out.println ("\tnot present = "+notpresent);     */                                      
        }
        catch (Exception e)
        {
            System.out.println ("error in method = jButton17ActionPerformed. "+e);
        }
        
    }
    
    public float getChangeproneness (String clones, int cloneType)
    {
        try
        {
            int count = 0;
            int tsupport = 0;
            BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system+"/results_crossboundary/changed_clones_type"+cloneType+".txt")));
            String str = "";
            String allclones = " " + clones + " ";

            System.out.println ("support values of the sp cp clones:\n------------------------------------------\n");
            while ((str = br.readLine())!=null)
            {
                if (str.trim().length() == 0){continue;}
                int id = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid"));
                int support = Integer.parseInt(cp.getAttributeValueFromString(str, "support"));
                
                if (allclones.contains(" "+id+" "))
                {
                    System.out.print (support + ", ");
                    count++;
                    tsupport = tsupport + support;
                }
            }
            br.close();
            System.out.println ("\n------------------------------------------\n");
            if (count > 0)
            {
                return (float)tsupport/allclones.trim().split("[ ]+").length;
            }
        }
        catch (Exception e)
        {
            System.out.println ("error in method = getChangedClones. "+e);
        }                        
        
        return 0;
    }
    
    public String getChangedClones (int cloneType)
    {
        String result = "";
        
        try
        {
            BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system+"/results_crossboundary/changed_clones_type"+cloneType+".txt")));
            String str = "";

            while ((str = br.readLine())!=null)
            {
                if (str.trim().length() == 0){continue;}
                int id = Integer.parseInt(cp.getAttributeValueFromString(str, "gcid"));
                
                if (!result.contains (" "+id+" "))
                {
                    result = result + " " + id + " ";                
                }
            }
            br.close();
        }
        catch (Exception e)
        {
            System.out.println ("error in method = getChangedClones. "+e);
        }                        
        
        return result;
    }
    
    public String getClonesInRevision (int revision, int cloneType)
    {
        String result ="";
        
        try
        {
            BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system+"/clonedmethods/type"+cloneType+"_clonedmethods_version_"+revision+".txt")));
            String str = "";

            while ((str = br.readLine())!=null)
            {
                if (str.trim().length() == 0){continue;}
                int id = Integer.parseInt(cp.getAttributeValueFromString(str, an.globalCloneID));
                
                result = result + " " + id + " ";                
            }
            br.close();
        }
        catch (Exception e)
        {

        }                
        return result;
    }
    
    
    public int isMethodClone (int gcid, int cloneType)
    {
        boolean result = false;
        
        for (int i =cp.revisionCount;i>=cp.revisionCount;i--)
        {
            //System.out.println ("revision = "+i);
            int got = 0;
            try
            {
                BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (cp.subject_system+"/clonedmethods/type"+cloneType+"_clonedmethods_version_"+i+".txt")));
                String str = "";
                
                while ((str = br.readLine())!=null)
                {
                    if (str.trim().length() == 0){continue;}
                    int id = Integer.parseInt(cp.getAttributeValueFromString(str, an.globalCloneID));
                    int gmid = Integer.parseInt(cp.getAttributeValueFromString(str, an.globalMethodID));
                    int sline = Integer.parseInt(cp.getAttributeValueFromString(str, an.cloneStartingLine));
                    int eline = Integer.parseInt(cp.getAttributeValueFromString(str, an.cloneEndingLine));
                    int msline = cp.getMethodStartingLine(gmid, i);
                    int meline = cp.getMethodEndingLine(gmid, i);
                    if (id == gcid)
                    {
                        got = 1;
                        int mlength = meline - msline+1;
                        int clength = eline - sline + 1;
                        if (mlength - clength < 2)
                        {
                            result = true;                            
                        }                        
                        break;
                    }
                }
                br.close();
            }
            catch (Exception e)
            {
                
            }
            if (got ==0)
            {
                return -1;
            }
            else
            {
                if (result)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }
        }
        
        return -1;
    }
    
    
    
    
    public void storeSPCPClonePairs (int cloneType)
    {
        spcp.getSPCPClonePairs(cloneType);
        spcp.getChangedClonesAndMethods(cloneType);
        spcp.determineSupportAndConfidencesSPCP (cloneType);        
    }
    
    
    public void storeDifferentClassPairs (int cloneType)
    {
        spcp.getDifferentClassPairs (cloneType);  
        spcp.getChangedClonesAndMethods(cloneType);
        spcp.determineSupportAndConfidencesDCP (cloneType);        
    }
    
    
    public void storeCloneNonclonePairs (int cloneType)
    {
        spcp.getCloneNonclonePairs (cloneType);
        spcp.getChangedClonesAndMethods(cloneType);
        spcp.determineSupportAndConfidencesCNP (cloneType);        
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
        jTextField1.setText(cp.subject_system);
        jTextField2.setText ("1");
        jTextField3.setText (cp.revisionCount+"");
        
        String language = cp.language_extension;
        int sindex = 0;
        if (language.contains ("c"))
        {
            sindex = 0;
        }
        else if (language.contains("java"))
        {
            sindex = 1;
        }
        else if (language.contains("cs"))
        {
            sindex = 2;
        }
        else
        {
            sindex = 3;
        }
        
        jComboBox1.setSelectedIndex(sindex);
        
    }//GEN-LAST:event_formWindowOpened

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
        
        ViewPairs vp = new ViewPairs ();
        vp.setVisible(true);
        vp.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
        
        //int cloneType = Integer.parseInt(jTextField1.getText().trim());
        
        //getEffectiveCrossBoundarySPCPPairs (cloneType);
        
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        me.mainMethod(); //method extraction.
        //me.restoreMethods(); //restoring methods.
        me.fixMethods(); //method fixing for missing revisions.
        oa.mainMethod(); //origin analysis of methods.
        uc.detectChangesInMethods(); //detect and store changes in methods.
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        cd.storeAndMapClones (1); //storing and mapping clones.
        cd.fixClonedMethods (1);
        oafc.analyzeOrigin(1); // origin analysis of clones.
        uc.detectChangesInClones(1); //update changes in clones.
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        cd.storeAndMapClones (2); //storing and mapping clones.
        cd.fixClonedMethods (2);
        oafc.analyzeOrigin(2); // origin analysis of clones.    
         uc.detectChangesInClones(2); //update changes in clones.
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        cd.storeAndMapClones (3); //storing and mapping clones.
        cd.fixClonedMethods (3);
        oafc.analyzeOrigin(3); // origin analysis of clones.        
         uc.detectChangesInClones(3); //update changes in clones.
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        cd.storeAndMapClones (123); //storing and mapping clones.
        cd.fixClonedMethods (123);
        oafc.analyzeOrigin(123); // origin analysis of clones.        
         uc.detectChangesInClones(123); //update changes in clones.
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        
        storeSPCPClonePairs (1);
        storeDifferentClassPairs (1);
        storeCloneNonclonePairs (1);
        spcp.storeChangedClonesAndMethods(1);
        getCrossBoundarySPCPClones (1);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here:
        storeSPCPClonePairs (2);
        storeDifferentClassPairs (2);
        storeCloneNonclonePairs (2);
        spcp.storeChangedClonesAndMethods(2);
        getCrossBoundarySPCPClones (2);
        
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // TODO add your handling code here:
        storeSPCPClonePairs (3);
        storeDifferentClassPairs (3);
        storeCloneNonclonePairs (3);
        spcp.storeChangedClonesAndMethods(3);
        getCrossBoundarySPCPClones (3);
        
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        // TODO add your handling code here:
        /*storeSPCPClonePairs (123);
        storeDifferentClassPairs (123);
        storeCloneNonclonePairs (123);
        spcp.storeChangedClonesAndMethods(123);*/
        getCrossBoundarySPCPClones (123);
        
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        
        int lan = jComboBox1.getSelectedIndex();
        String language = "";
        switch (lan)
        {
            case 0:
                language = "c";
                break;
                
            case 1:
                language = "java";
                break;
                
            case 2:
                language = "cs";
                break;
                
            case 3:
                language = "py";
                break;
        }
        
        SelectParameters sp = new SelectParameters ();
        setVisible(false);
        sp.saveSystemInformation(jTextField1.getText().trim(), language, Integer.parseInt(jTextField2.getText().trim()), Integer.parseInt(jTextField3.getText().trim()), "");
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectCrossboundary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectCrossboundary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectCrossboundary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectCrossboundary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectCrossboundary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
